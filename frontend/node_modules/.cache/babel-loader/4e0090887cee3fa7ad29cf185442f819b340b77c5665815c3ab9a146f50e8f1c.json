{"ast":null,"code":"import React,{useState}from'react';import axios from'axios';import BsNav from'../Containers/BsNav';import'../styles/TheoryTrainer.css';import major2nd from'../img/major2nd.png';import major3rd from'../img/major3rd.png';import perfect4th from'../img/perfect4th.png';import perfect5th from'../img/perfect5th.png';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const TheoryTrainer=()=>{const allTasks=[{name:'Perfect 5th',notes:['C4','G4']},{name:'Major 3rd',notes:['C3','E3']},{name:'Perfect 4th',notes:['C4','F4']},{name:'Major 2nd',notes:['C4','D4']}];const taskImages={'Perfect 5th':perfect5th,'Major 3rd':major3rd,'Perfect 4th':perfect4th,'Major 2nd':major2nd};const[completedTasks,setCompletedTasks]=useState([]);const[currentTask,setCurrentTask]=useState(null);const[score,setScore]=useState(0);const[gameOver,setGameOver]=useState(false);const generateRandomTask=()=>{let remainingTasks=allTasks.filter(task=>!completedTasks.includes(task.name));if(remainingTasks.length===0){setGameOver(true);return;}const randomIndex=Math.floor(Math.random()*remainingTasks.length);const newTask=remainingTasks[randomIndex];setCurrentTask(newTask);setCompletedTasks(prevTasks=>[...prevTasks,newTask.name]);};const confirmInput=async()=>{try{const response=await axios.get('http://localhost:5000/get_note_data',{params:{limit:2}});const fetchedNotes=response.data;const isValid=fetchedNotes.some(group=>{const taskNotesStr=currentTask.notes.sort().join(',');const groupStr=group.sort().join(',');return taskNotesStr===groupStr;});console.log(\"Fetched Notes:\",fetchedNotes);console.log(\"Is Valid:\",isValid);if(isValid){alert(\"Correct! Moving to the next task.\");setScore(prevScore=>prevScore+1);}else{alert(\"Incorrect. Moving to the next task.\");}generateRandomTask();}catch(error){console.error(\"Error fetching note data:\",error);}};const getScoreMessage=score=>{switch(score){case 1:return\"You scored 25%, you need to work on your theory!\";case 2:return\"You scored 50%, not bad but keep studying!\";case 3:return\"You scored 75%, good work, you're nearly an expert!\";case 4:return\"You scored 100%, you are a music theory expert!\";default:return\"\";}};useState(()=>{generateRandomTask();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"musical-stairs-game\",children:[/*#__PURE__*/_jsx(BsNav,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Play the Musical Stairs Game\"}),currentTask?/*#__PURE__*/_jsxs(\"div\",{className:\"task-container\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Play the following interval on the stairs: \",currentTask.name]}),/*#__PURE__*/_jsx(\"div\",{className:\"image-container\",children:/*#__PURE__*/_jsx(\"img\",{src:taskImages[currentTask.name],alt:currentTask.name,className:\"task-image\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"button-container\",children:/*#__PURE__*/_jsx(\"button\",{className:\"validate-task-btn\",onClick:confirmInput,children:\"Confirm Answer!\"})})]}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading task...\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Score: \",score]}),gameOver&&/*#__PURE__*/_jsxs(\"div\",{className:\"game-over-container\",children:[/*#__PURE__*/_jsx(\"p\",{children:getScoreMessage(score)}),/*#__PURE__*/_jsx(\"button\",{className:\"restart-game-btn\",onClick:()=>window.location.reload(),children:\"Restart Game\"})]})]})]});};export default TheoryTrainer;","map":{"version":3,"names":["React","useState","axios","BsNav","major2nd","major3rd","perfect4th","perfect5th","jsx","_jsx","jsxs","_jsxs","TheoryTrainer","allTasks","name","notes","taskImages","completedTasks","setCompletedTasks","currentTask","setCurrentTask","score","setScore","gameOver","setGameOver","generateRandomTask","remainingTasks","filter","task","includes","length","randomIndex","Math","floor","random","newTask","prevTasks","confirmInput","response","get","params","limit","fetchedNotes","data","isValid","some","group","taskNotesStr","sort","join","groupStr","console","log","alert","prevScore","error","getScoreMessage","className","children","src","alt","onClick","window","location","reload"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/TheoryTrainer.css';\nimport major2nd from '../img/major2nd.png';\nimport major3rd from '../img/major3rd.png';\nimport perfect4th from '../img/perfect4th.png';\nimport perfect5th from '../img/perfect5th.png';\n\nconst TheoryTrainer = () => {\n  const allTasks = [\n    { name: 'Perfect 5th', notes: ['C4', 'G4'] },\n    { name: 'Major 3rd', notes: ['C3', 'E3'] },\n    { name: 'Perfect 4th', notes: ['C4', 'F4'] },\n    { name: 'Major 2nd', notes: ['C4', 'D4'] },\n  ];\n\n  const taskImages = {\n    'Perfect 5th': perfect5th,\n    'Major 3rd': major3rd,\n    'Perfect 4th': perfect4th,\n    'Major 2nd': major2nd,\n  };\n\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  const generateRandomTask = () => {\n    let remainingTasks = allTasks.filter(task => !completedTasks.includes(task.name));\n  \n    if (remainingTasks.length === 0) {\n      setGameOver(true);\n      return;\n    }\n  \n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    const newTask = remainingTasks[randomIndex];\n  \n    setCurrentTask(newTask);\n    setCompletedTasks(prevTasks => [...prevTasks, newTask.name]);\n  };\n\n  const confirmInput = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/get_note_data', {\n        params: { limit: 2 }\n      });\n      const fetchedNotes = response.data;\n      \n      const isValid = fetchedNotes.some(group => {\n        const taskNotesStr = currentTask.notes.sort().join(',');\n        const groupStr = group.sort().join(',');\n        return taskNotesStr === groupStr;\n      });\n  \n      console.log(\"Fetched Notes:\", fetchedNotes);\n      console.log(\"Is Valid:\", isValid);\n  \n      if (isValid) {\n        alert(\"Correct! Moving to the next task.\");\n        setScore(prevScore => prevScore + 1);\n      } else {\n        alert(\"Incorrect. Moving to the next task.\");\n      }\n      generateRandomTask();\n    } catch (error) {\n      console.error(\"Error fetching note data:\", error);\n    }\n  };\n\n  const getScoreMessage = (score) => {\n    switch (score) {\n      case 1:\n        return \"You scored 25%, you need to work on your theory!\";\n      case 2:\n        return \"You scored 50%, not bad but keep studying!\";\n      case 3:\n        return \"You scored 75%, good work, you're nearly an expert!\";\n      case 4:\n        return \"You scored 100%, you are a music theory expert!\";\n      default:\n        return \"\";\n    }\n  };\n\n  useState(() => {\n    generateRandomTask();\n  }, []);\n\n  return (\n    <div className=\"musical-stairs-game\">\n      <BsNav />\n      <div className=\"game-container\">\n        <h1>Play the Musical Stairs Game</h1>\n        {currentTask ? (\n          <div className=\"task-container\">\n            <p>Play the following interval on the stairs: {currentTask.name}</p>\n            <div className=\"image-container\">\n              <img src={taskImages[currentTask.name]} alt={currentTask.name} className=\"task-image\" />\n            </div>\n            <div className=\"button-container\">\n              <button className=\"validate-task-btn\" onClick={confirmInput}>Confirm Answer!</button>\n            </div>\n          </div>\n        ) : (\n          <p>Loading task...</p>\n        )}\n        <p>Score: {score}</p>\n        {gameOver && (\n          <div className=\"game-over-container\">\n            <p>{getScoreMessage(score)}</p>\n            <button className=\"restart-game-btn\" onClick={() => window.location.reload()}>Restart Game</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TheoryTrainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}