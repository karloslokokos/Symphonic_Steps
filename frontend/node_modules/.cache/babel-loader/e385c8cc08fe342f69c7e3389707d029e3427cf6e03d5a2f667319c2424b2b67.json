{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicalStairsGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicalStairsGame = () => {\n  _s();\n  // Define your tasks and associated notes here.\n  const allTasks = [{\n    name: 'Perfect 5th',\n    notes: ['C4', 'G4']\n  }, {\n    name: 'Major 3rd',\n    notes: ['C4', 'E4']\n  }, {\n    name: 'Perfect 4th',\n    notes: ['C4', 'F4']\n  }, {\n    name: 'Major 2nd',\n    notes: ['C4', 'D4']\n  }];\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Function to select a new task randomly.\n  const generateRandomTask = () => {\n    // Filter out tasks that have already been completed\n    let remainingTasks = allTasks.filter(task => !completedTasks.includes(task.name));\n    if (remainingTasks.length === 0) {\n      // All tasks have been presented\n      setGameOver(true);\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    const newTask = remainingTasks[randomIndex];\n    setCurrentTask(newTask);\n    // Update completedTasks to include the name of the new task\n    setCompletedTasks(prevTasks => [...prevTasks, newTask.name]);\n  };\n\n  // Function to fetch note data and validate the current task.\n  const validateTask = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/get_note_data', {\n        params: {\n          limit: 2\n        } // Fetching the last 2 note entries for validation.\n      });\n\n      const fetchedNotes = response.data; // Assuming this returns an array of note groups like [[\"C4\", \"G4\"]]\n\n      // Updated validation logic\n      const isValid = fetchedNotes.some(group => {\n        const taskNotesStr = currentTask.notes.sort().join(',');\n        const groupStr = group.sort().join(',');\n        return taskNotesStr === groupStr;\n      });\n      console.log(\"Fetched Notes:\", fetchedNotes);\n      console.log(\"Is Valid:\", isValid);\n      if (isValid) {\n        alert(\"Correct! Moving to the next task.\");\n        setScore(prevScore => prevScore + 1); // Increment score only if valid\n      } else {\n        alert(\"Incorrect. Moving to the next task.\");\n      }\n      generateRandomTask(); // Move to the next task regardless of validation outcome\n    } catch (error) {\n      console.error(\"Error fetching note data:\", error);\n    }\n  };\n\n  // Initial task generation upon component mount.\n  useState(() => {\n    generateRandomTask();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"musical-stairs-game\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Play the Musical Stairs Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), currentTask ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Play the following chord or interval on the stairs: \", currentTask.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"validate-task-btn\",\n          onClick: validateTask,\n          children: \"Validate Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 1\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading task...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Game Over! Your score: \", score, \" out of \", allTasks.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"restart-game-btn\",\n          onClick: () => generateRandomTask(),\n          children: \"Restart Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicalStairsGame, \"fJHQN8+6hPZFfDyh/fXvBtjH120=\");\n_c = MusicalStairsGame;\nexport default MusicalStairsGame;\nvar _c;\n$RefreshReg$(_c, \"MusicalStairsGame\");","map":{"version":3,"names":["React","useState","axios","BsNav","jsxDEV","_jsxDEV","MusicalStairsGame","_s","allTasks","name","notes","completedTasks","setCompletedTasks","currentTask","setCurrentTask","score","setScore","gameOver","setGameOver","generateRandomTask","remainingTasks","filter","task","includes","length","randomIndex","Math","floor","random","newTask","prevTasks","validateTask","response","get","params","limit","fetchedNotes","data","isValid","some","group","taskNotesStr","sort","join","groupStr","console","log","alert","prevScore","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicalStairsGame.css';\n\nconst MusicalStairsGame = () => {\n  // Define your tasks and associated notes here.\n  const allTasks = [\n    { name: 'Perfect 5th', notes: ['C4', 'G4'] },\n    { name: 'Major 3rd', notes: ['C4', 'E4'] },\n    { name: 'Perfect 4th', notes: ['C4', 'F4'] },\n    { name: 'Major 2nd', notes: ['C4', 'D4'] },\n  ];\n\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Function to select a new task randomly.\n  const generateRandomTask = () => {\n    // Filter out tasks that have already been completed\n    let remainingTasks = allTasks.filter(task => !completedTasks.includes(task.name));\n  \n    if (remainingTasks.length === 0) {\n      // All tasks have been presented\n      setGameOver(true);\n      return;\n    }\n  \n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    const newTask = remainingTasks[randomIndex];\n  \n    setCurrentTask(newTask);\n    // Update completedTasks to include the name of the new task\n    setCompletedTasks(prevTasks => [...prevTasks, newTask.name]);\n  };\n  \n\n  // Function to fetch note data and validate the current task.\n  const validateTask = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/get_note_data', {\n        params: { limit: 2 } // Fetching the last 2 note entries for validation.\n      });\n      const fetchedNotes = response.data; // Assuming this returns an array of note groups like [[\"C4\", \"G4\"]]\n      \n      // Updated validation logic\n      const isValid = fetchedNotes.some(group => {\n        const taskNotesStr = currentTask.notes.sort().join(',');\n        const groupStr = group.sort().join(',');\n        return taskNotesStr === groupStr;\n      });\n  \n      console.log(\"Fetched Notes:\", fetchedNotes);\n      console.log(\"Is Valid:\", isValid);\n  \n      if (isValid) {\n        alert(\"Correct! Moving to the next task.\");\n        setScore(prevScore => prevScore + 1); // Increment score only if valid\n      } else {\n        alert(\"Incorrect. Moving to the next task.\");\n      }\n      generateRandomTask(); // Move to the next task regardless of validation outcome\n    } catch (error) {\n      console.error(\"Error fetching note data:\", error);\n    }\n  };\n  \n\n  // Initial task generation upon component mount.\n  useState(() => {\n    generateRandomTask();\n  }, []);\n\n  return (\n    <div className=\"musical-stairs-game\"> {/* Ensure this class aligns with your GoDaddy-like CSS */}\n      <BsNav />\n      <div className=\"game-container\"> {/* Consider this for additional styling if needed */}\n        <h1>Play the Musical Stairs Game</h1>\n        {currentTask ? (\n\n            \n<div className=\"button-container\">\n<p>Play the following chord or interval on the stairs: {currentTask.name}</p>\n\n  <button className=\"validate-task-btn\" onClick={validateTask}>Validate Task</button>\n</div>\n\n        ) : (\n          <p>Loading task...</p>\n        )}\n        <p>Score: {score}</p>\n        {gameOver && (\n          <div className=\"game-over-container\">\n            <p>Game Over! Your score: {score} out of {allTasks.length}</p>\n            <button className=\"restart-game-btn\" onClick={() => generateRandomTask()}>Restart Game</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default MusicalStairsGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}