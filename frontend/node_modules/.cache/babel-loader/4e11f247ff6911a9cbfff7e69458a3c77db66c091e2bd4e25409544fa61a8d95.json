{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Vex from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MusicVisualizer() {\n  _s();\n  const [noteData, setNoteData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Fetch note data from your Flask server\n    fetch('http://localhost:5000/get_note_data').then(response => response.json()).then(data => {\n      setNoteData(data);\n      setLoading(false);\n    }).catch(error => {\n      setError(error);\n      setLoading(false);\n    });\n  }, []); // Empty dependency array to run the effect only once on mount\n\n  // ... (previous code)\n\n  useEffect(() => {\n    if (!loading && !error) {\n      console.log('noteData length:', noteData.length);\n\n      // Create an instance of VexFlow\n      const VF = Vex.Flow;\n      const container = document.getElementById('visualizer-container');\n      container.innerHTML = ''; // Clear previous content\n\n      // Check if noteData is not empty\n      if (noteData.length > 0) {\n        // Create a Vex.Flow Formatter and Voice\n        const formatter = new VF.Formatter().joinVoices([new VF.Voice({\n          time: '4/4'\n        })]);\n\n        // Map noteData to Vex.Flow StaveNotes\n        const notes = noteData.map(note => {\n          return new VF.StaveNote({\n            keys: [note],\n            duration: 'q'\n          });\n        });\n\n        // Check if notes array is not empty\n        if (notes.length > 0) {\n          // Format and draw the notes on the Vex.Flow stave\n          formatter.format([new VF.Voice().addTickables(notes)], 400); // Adjust width as needed\n          const stave = new VF.Stave(10, 0, 400); // Adjust position and width as needed\n          stave.addClef('treble').setContext(container).draw();\n          notes.forEach(note => note.setStave(stave).setContext(container).draw());\n        } else {\n          console.warn('Note data is empty or invalid.');\n        }\n      }\n    }\n  }, [loading, error, noteData]);\n\n  // ... (rest of the code)\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Music Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"visualizer-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(MusicVisualizer, \"c5UsaOoqP0Ta3b6g/AoU+6PVaMs=\");\n_c = MusicVisualizer;\nexport default MusicVisualizer;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Vex","jsxDEV","_jsxDEV","MusicVisualizer","_s","noteData","setNoteData","loading","setLoading","error","setError","fetch","then","response","json","data","catch","console","log","length","VF","Flow","container","document","getElementById","innerHTML","formatter","Formatter","joinVoices","Voice","time","notes","map","note","StaveNote","keys","duration","format","addTickables","stave","Stave","addClef","setContext","draw","forEach","setStave","warn","children","fileName","_jsxFileName","lineNumber","columnNumber","message","id","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Vex from 'vexflow';\n\nfunction MusicVisualizer() {\n  const [noteData, setNoteData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Fetch note data from your Flask server\n    fetch('http://localhost:5000/get_note_data')\n      .then(response => response.json())\n      .then(data => {\n        setNoteData(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n  }, []); // Empty dependency array to run the effect only once on mount\n\n// ... (previous code)\n\nuseEffect(() => {\n  if (!loading && !error) {\n    console.log('noteData length:', noteData.length);\n\n    // Create an instance of VexFlow\n    const VF = Vex.Flow;\n    const container = document.getElementById('visualizer-container');\n    container.innerHTML = ''; // Clear previous content\n\n    // Check if noteData is not empty\n    if (noteData.length > 0) {\n      // Create a Vex.Flow Formatter and Voice\n      const formatter = new VF.Formatter().joinVoices([new VF.Voice({ time: '4/4' })]);\n\n      // Map noteData to Vex.Flow StaveNotes\n      const notes = noteData.map((note) => {\n        return new VF.StaveNote({ keys: [note], duration: 'q' });\n      });\n\n      // Check if notes array is not empty\n      if (notes.length > 0) {\n        // Format and draw the notes on the Vex.Flow stave\n        formatter.format([new VF.Voice().addTickables(notes)], 400); // Adjust width as needed\n        const stave = new VF.Stave(10, 0, 400); // Adjust position and width as needed\n        stave.addClef('treble').setContext(container).draw();\n        notes.forEach((note) => note.setStave(stave).setContext(container).draw());\n      } else {\n        console.warn('Note data is empty or invalid.');\n      }\n    }\n  }\n}, [loading, error, noteData]);\n\n// ... (rest of the code)\n\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h1>Music Visualizer</h1>\n      <div id=\"visualizer-container\"></div>\n    </div>\n  );\n}\n\nexport default MusicVisualizer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}