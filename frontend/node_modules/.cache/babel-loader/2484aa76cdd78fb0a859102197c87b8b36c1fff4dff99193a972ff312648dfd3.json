{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client'; // Ensure you have socket.io-client installed\nimport { Score } from './Score';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicVisualiser.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualiser = () => {\n  _s();\n  const [noteData, setNoteData] = useState([]);\n  const [refreshKey, setRefreshKey] = useState(0); // A key to force re-render\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\n  const wsUrl = 'http://localhost:5000'; // Adjust with your WebSocket server URL\n\n  // Function to fetch note data\n  const fetchNotes = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=16`);\n      setNoteData(response.data);\n      console.log('Note data fetched');\n    } catch (error) {\n      console.error('Error fetching note data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchNotes(); // Fetch initial note data\n\n    // WebSocket connection setup\n    const socket = io(wsUrl);\n    socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n\n    // Listen for the specific message to refresh the component\n    socket.on('data_update', () => {\n      console.log('data update received, refreshing component');\n      setRefreshKey(prevKey => prevKey + 1); // Update the key to force re-render\n      window.location.reload();\n      fetchNotes(); // Optionally fetch the latest notes again\n    });\n\n    return () => {\n      socket.disconnect(); // Clean up on component unmount\n    };\n  }, [refreshKey]); // Depend on refreshKey to re-run the effect when it changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainPage-page\",\n    children: [/*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-container\",\n        children: /*#__PURE__*/_jsxDEV(Score, {\n          className: \"Score\",\n          staves: noteData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, refreshKey, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualiser, \"/PIiRNKk30oNrH9dQ7acYRTmTGU=\");\n_c = MusicVisualiser;\nexport default MusicVisualiser;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualiser\");","map":{"version":3,"names":["React","useEffect","useState","axios","io","Score","BsNav","jsxDEV","_jsxDEV","MusicVisualiser","_s","noteData","setNoteData","refreshKey","setRefreshKey","apiUrl","process","env","REACT_APP_API_BASE_URL","wsUrl","fetchNotes","response","get","data","console","log","error","socket","on","prevKey","window","location","reload","disconnect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","staves","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client'; // Ensure you have socket.io-client installed\nimport { Score } from './Score';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicVisualiser.css';\n\nconst MusicVisualiser = () => {\n  const [noteData, setNoteData] = useState([]);\n  const [refreshKey, setRefreshKey] = useState(0); // A key to force re-render\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\n  const wsUrl = 'http://localhost:5000'; // Adjust with your WebSocket server URL\n  \n  // Function to fetch note data\n  const fetchNotes = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=16`);\n      setNoteData(response.data);\n      console.log('Note data fetched');\n    } catch (error) {\n      console.error('Error fetching note data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchNotes(); // Fetch initial note data\n    \n    // WebSocket connection setup\n    const socket = io(wsUrl);\n    socket.on('connect', () => {\n      console.log('Connected to WebSocket server');\n    });\n\n    // Listen for the specific message to refresh the component\n    socket.on('data_update', () => {\n      console.log('data update received, refreshing component');\n      setRefreshKey(prevKey => prevKey + 1); // Update the key to force re-render\n      window.location.reload();\n      fetchNotes(); // Optionally fetch the latest notes again\n    });\n\n    return () => {\n      socket.disconnect(); // Clean up on component unmount\n    };\n  }, [refreshKey]); // Depend on refreshKey to re-run the effect when it changes\n\n  return (\n    <div key={refreshKey} className=\"MainPage-page\">\n      <BsNav />\n      <div className=\"centered-content\">\n        <div className=\"score-container\">\n          <Score className=\"Score\" staves={noteData} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MusicVisualiser;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}