{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client'; // Make sure you've installed socket.io-client\nimport { Score } from './Score';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicVisualiser.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrl = process.env.REACT_APP_API_BASE_URL; // Assuming this is set correctly\nconst socket = io(apiUrl); // Connect to the WebSocket server at component level\n\nconst MusicVisualiser = () => {\n  _s();\n  const [noteData, setNoteData] = useState([]);\n  const [refreshToggle, setRefreshToggle] = useState(false); // A simple toggle to trigger data refresh\n\n  // Wrap fetchNotes in useCallback to ensure stability across re-renders\n  const fetchNotes = useCallback(async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=16`);\n      setNoteData(response.data);\n      console.log('Note data fetched:', response.data);\n    } catch (error) {\n      console.error('Error fetching note data:', error);\n    }\n  }, []);\n  useEffect(() => {\n    fetchNotes(); // Fetch initial notes on mount\n  }, [fetchNotes, refreshToggle]); // fetchNotes is stable, but refreshToggle triggers re-fetch\n\n  useEffect(() => {\n    // Listen for 'note_update' event from the server\n    socket.on('note_update', () => {\n      console.log('New note update received');\n      setRefreshToggle(toggle => !toggle); // Flip the toggle to trigger data re-fetch\n    });\n\n    return () => {\n      socket.off('note_update');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainPage-page\",\n    children: [/*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-container\",\n        children: /*#__PURE__*/_jsxDEV(Score, {\n          className: \"Score\",\n          staves: noteData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualiser, \"bok1xwwXZfsZrSlGqokWR2eKAXA=\");\n_c = MusicVisualiser;\nexport default MusicVisualiser;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualiser\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","io","Score","BsNav","jsxDEV","_jsxDEV","apiUrl","process","env","REACT_APP_API_BASE_URL","socket","MusicVisualiser","_s","noteData","setNoteData","refreshToggle","setRefreshToggle","fetchNotes","response","get","data","console","log","error","on","toggle","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","staves","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/MusicVisualiser.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client'; // Make sure you've installed socket.io-client\nimport { Score } from './Score';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicVisualiser.css';\n\nconst apiUrl = process.env.REACT_APP_API_BASE_URL; // Assuming this is set correctly\nconst socket = io(apiUrl); // Connect to the WebSocket server at component level\n\nconst MusicVisualiser = () => {\n  const [noteData, setNoteData] = useState([]);\n  const [refreshToggle, setRefreshToggle] = useState(false); // A simple toggle to trigger data refresh\n\n  // Wrap fetchNotes in useCallback to ensure stability across re-renders\n  const fetchNotes = useCallback(async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=16`);\n      setNoteData(response.data);\n      console.log('Note data fetched:', response.data);\n    } catch (error) {\n      console.error('Error fetching note data:', error);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchNotes(); // Fetch initial notes on mount\n  }, [fetchNotes, refreshToggle]); // fetchNotes is stable, but refreshToggle triggers re-fetch\n\n  useEffect(() => {\n    // Listen for 'note_update' event from the server\n    socket.on('note_update', () => {\n      console.log('New note update received');\n      setRefreshToggle(toggle => !toggle); // Flip the toggle to trigger data re-fetch\n    });\n\n    return () => {\n      socket.off('note_update');\n    };\n  }, []);\n\n  return (\n    <div className=\"MainPage-page\">\n      <BsNav />\n      <div className=\"centered-content\">\n        <div className=\"score-container\">\n          <Score className=\"Score\" staves={noteData} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MusicVisualiser;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,kBAAkB,CAAC,CAAC;AACnC,SAASC,KAAK,QAAQ,SAAS;AAC/B,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC,CAAC;AACnD,MAAMC,MAAM,GAAGT,EAAE,CAACK,MAAM,CAAC,CAAC,CAAC;;AAE3B,MAAMK,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE3D;EACA,MAAMoB,UAAU,GAAGlB,WAAW,CAAC,YAAY;IACzC,IAAI;MACF,MAAMmB,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAE,GAAEb,MAAO,yBAAwB,CAAC;MACpEQ,WAAW,CAACI,QAAQ,CAACE,IAAI,CAAC;MAC1BC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,QAAQ,CAACE,IAAI,CAAC;IAClD,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC,EAAE,EAAE,CAAC;EAENzB,SAAS,CAAC,MAAM;IACdmB,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB,CAAC,EAAE,CAACA,UAAU,EAAEF,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEjCjB,SAAS,CAAC,MAAM;IACd;IACAY,MAAM,CAACc,EAAE,CAAC,aAAa,EAAE,MAAM;MAC7BH,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCN,gBAAgB,CAACS,MAAM,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC;;IAEF,OAAO,MAAM;MACXf,MAAM,CAACgB,GAAG,CAAC,aAAa,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA;IAAKsB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BvB,OAAA,CAACF,KAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACT3B,OAAA;MAAKsB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/BvB,OAAA;QAAKsB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9BvB,OAAA,CAACH,KAAK;UAACyB,SAAS,EAAC,OAAO;UAACM,MAAM,EAAEpB;QAAS;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpB,EAAA,CAzCID,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AA2CrB,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}