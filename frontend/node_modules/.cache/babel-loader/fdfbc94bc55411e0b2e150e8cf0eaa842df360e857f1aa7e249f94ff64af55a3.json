{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useWebSocket } from './WebSocketContext'; // Adjust the import path as necessary\nimport { Score } from './Score';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicVisualiser.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualiser = () => {\n  _s();\n  const [noteData, setNoteData] = useState([]);\n  const apiUrl = process.env.REACT_APP_API_BASE_URL; // Ensure this is set correctly\n  const {\n    refreshKey\n  } = useWebSocket();\n\n  // Function to fetch the latest note data\n  const fetchNotes = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=16`);\n      setNoteData(response.data);\n      console.log('Note data fetched');\n    } catch (error) {\n      console.error('Error fetching note data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchNotes();\n    // The fetchNotes function will be called again when refreshKey changes,\n    // which is triggered by WebSocket messages. No need to listen to WebSocket\n    // events here directly, as the WebSocket context handles it globally.\n  }, [apiUrl, refreshKey]); // Depend on refreshKey to re-fetch when it changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainPage-page\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered-content\",\n      children: /*#__PURE__*/_jsxDEV(Score, {\n        className: \"Score\",\n        staves: noteData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, refreshKey, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualiser, \"M1qkLOzifewQcwYdtJhlybRI6DY=\", false, function () {\n  return [useWebSocket];\n});\n_c = MusicVisualiser;\nexport default MusicVisualiser;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualiser\");","map":{"version":3,"names":["React","useEffect","useState","axios","useWebSocket","Score","BsNav","jsxDEV","_jsxDEV","MusicVisualiser","_s","noteData","setNoteData","apiUrl","process","env","REACT_APP_API_BASE_URL","refreshKey","fetchNotes","response","get","data","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","staves","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useWebSocket } from './WebSocketContext'; // Adjust the import path as necessary\nimport { Score } from './Score';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicVisualiser.css';\n\nconst MusicVisualiser = () => {\n  const [noteData, setNoteData] = useState([]);\n  const apiUrl = process.env.REACT_APP_API_BASE_URL; // Ensure this is set correctly\n  const { refreshKey } = useWebSocket();\n\n  // Function to fetch the latest note data\n  const fetchNotes = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=16`);\n      setNoteData(response.data);\n      console.log('Note data fetched');\n    } catch (error) {\n      console.error('Error fetching note data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchNotes();\n    // The fetchNotes function will be called again when refreshKey changes,\n    // which is triggered by WebSocket messages. No need to listen to WebSocket\n    // events here directly, as the WebSocket context handles it globally.\n  }, [apiUrl, refreshKey]); // Depend on refreshKey to re-fetch when it changes\n\n  return (\n    <div key={refreshKey} className=\"MainPage-page\"> {/* Key to force re-render */}\n      <BsNav />\n      <div className=\"centered-content\">\n        <Score className=\"Score\" staves={noteData} />\n      </div>\n    </div>\n  );\n};\n\nexport default MusicVisualiser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,oBAAoB,CAAC,CAAC;AACnD,SAASC,KAAK,QAAQ,SAAS;AAC/B,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMW,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CAAC,CAAC;EACnD,MAAM;IAAEC;EAAW,CAAC,GAAGb,YAAY,CAAC,CAAC;;EAErC;EACA,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,GAAEP,MAAO,yBAAwB,CAAC;MACpED,WAAW,CAACO,QAAQ,CAACE,IAAI,CAAC;MAC1BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACdiB,UAAU,CAAC,CAAC;IACZ;IACA;IACA;EACF,CAAC,EAAE,CAACL,MAAM,EAAEI,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE1B,oBACET,OAAA;IAAsBiB,SAAS,EAAC,eAAe;IAAAC,QAAA,GAAC,GAAC,eAC/ClB,OAAA,CAACF,KAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACTtB,OAAA;MAAKiB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/BlB,OAAA,CAACH,KAAK;QAACoB,SAAS,EAAC,OAAO;QAACM,MAAM,EAAEpB;MAAS;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC;EAAA,GAJEb,UAAU;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAKf,CAAC;AAEV,CAAC;AAACpB,EAAA,CA/BID,eAAe;EAAA,QAGIL,YAAY;AAAA;AAAA4B,EAAA,GAH/BvB,eAAe;AAiCrB,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}