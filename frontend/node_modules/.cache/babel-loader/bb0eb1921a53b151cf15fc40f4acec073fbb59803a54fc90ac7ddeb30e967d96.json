{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/Score.js\",\n  _s = $RefreshSig$();\n// renders musical notation using the VexFlow library, \n\nimport React, { useRef, useEffect } from 'react';\nimport VexFlow from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VF = VexFlow.Flow;\nconst {\n  Renderer,\n  Stave,\n  StaveNote,\n  Formatter\n} = VF;\nconst clefAndTimeWidth = 60;\nexport function Score({\n  staves = [],\n  clef = 'treble',\n  timeSignature = '4/4',\n  width = 1500,\n  height = 150\n}) {\n  _s();\n  const container = useRef();\n  const rendererRef = useRef();\n  useEffect(() => {\n    const initializeRenderer = () => {\n      rendererRef.current = new Renderer(container.current, Renderer.Backends.SVG);\n    };\n    if (!rendererRef.current) {\n      initializeRenderer();\n    }\n    const renderer = rendererRef.current;\n    renderer.resize(width, height);\n    const context = renderer.getContext();\n    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');\n    const staveWidth = (width - clefAndTimeWidth) / staves.length;\n    let currX = 0;\n    staves.forEach((notes, i) => {\n      const stave = new Stave(currX, 0, staveWidth);\n      if (i === 0) {\n        stave.setWidth(staveWidth + clefAndTimeWidth);\n        stave.addClef(clef).addTimeSignature(timeSignature);\n      }\n      currX += stave.getWidth();\n      stave.setContext(context).draw();\n      const processedNotes = notes.map(note => typeof note === 'string' ? {\n        key: note\n      } : Array.isArray(note) ? {\n        key: note[0],\n        duration: note[1]\n      } : note).map(({\n        key,\n        ...rest\n      }) => typeof key === 'string' ? {\n        key: key.includes('/') ? key : `${key[0]}/${key.slice(1)}`,\n        ...rest\n      } : rest).map(({\n        key,\n        keys,\n        duration = 'q'\n      }) => new StaveNote({\n        keys: key ? [key] : keys,\n        duration: String(duration)\n      }));\n      Formatter.FormatAndDraw(context, stave, processedNotes, {\n        auto_beam: true\n      });\n    });\n  }, [staves, clef, timeSignature, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: container,\n    style: {\n      marginLeft: '10px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n}\n\n// Imports and Setup: The necessary classes from the VexFlow library are imported and some constants are set up for layout configurations.\n// Component Initialization: The component accepts props for configuration, including the staves data, clef, time signature, and dimensions.\n// Rendering Logic: Inside useEffect, a renderer is initialized once using a ref to avoid re-creation on each render. The renderer is used to \n// set up and draw the musical staves and notes based on the provided data.\n// Stave and Note Processing: The notes are processed to ensure they are in the correct format for VexFlow. This includes ensuring that notes\n//  are structured correctly and converting them into StaveNote objects.\n// Rendering Container: The component returns a div element where the SVG renderer will attach the visual representation of the staves.\n_s(Score, \"Oo94nw6YKmif0GbcQr28f6bFgJU=\");\n_c = Score;\nvar _c;\n$RefreshReg$(_c, \"Score\");","map":{"version":3,"names":["React","useRef","useEffect","VexFlow","jsxDEV","_jsxDEV","VF","Flow","Renderer","Stave","StaveNote","Formatter","clefAndTimeWidth","Score","staves","clef","timeSignature","width","height","_s","container","rendererRef","initializeRenderer","current","Backends","SVG","renderer","resize","context","getContext","setFont","setBackgroundFillStyle","staveWidth","length","currX","forEach","notes","i","stave","setWidth","addClef","addTimeSignature","getWidth","setContext","draw","processedNotes","map","note","key","Array","isArray","duration","rest","includes","slice","keys","String","FormatAndDraw","auto_beam","ref","style","marginLeft","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/Score.js"],"sourcesContent":["// renders musical notation using the VexFlow library, \n\n\nimport React, { useRef, useEffect } from 'react';\nimport VexFlow from 'vexflow';\n\n\nconst VF = VexFlow.Flow;\nconst { Renderer, Stave, StaveNote, Formatter } = VF;\n\nconst clefAndTimeWidth = 60;\n\nexport function Score({ staves = [], clef = 'treble', timeSignature = '4/4', width = 1500, height = 150 }) {\n  const container = useRef();\n  const rendererRef = useRef();\n\n  useEffect(() => {\n    const initializeRenderer = () => {\n      rendererRef.current = new Renderer(container.current, Renderer.Backends.SVG);\n    };\n\n    if (!rendererRef.current) {\n      initializeRenderer();\n    }\n\n    const renderer = rendererRef.current;\n    renderer.resize(width, height);\n\n    const context = renderer.getContext();\n    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');\n\n    const staveWidth = (width - clefAndTimeWidth) / staves.length;\n    let currX = 0;\n\n    staves.forEach((notes, i) => {\n      const stave = new Stave(currX, 0, staveWidth);\n\n      if (i === 0) {\n        stave.setWidth(staveWidth + clefAndTimeWidth);\n        stave.addClef(clef).addTimeSignature(timeSignature);\n      }\n\n      currX += stave.getWidth();\n      stave.setContext(context).draw();\n\n      const processedNotes = notes.map(note => (\n        typeof note === 'string' ? { key: note } : (Array.isArray(note) ? { key: note[0], duration: note[1] } : note)\n      )).map(({ key, ...rest }) => (\n        typeof key === 'string' ? { key: key.includes('/') ? key : `${key[0]}/${key.slice(1)}`, ...rest } : rest\n      )).map(({ key, keys, duration = 'q' }) => (\n        new StaveNote({\n          keys: key ? [key] : keys,\n          duration: String(duration),\n        })\n      ));\n\n      Formatter.FormatAndDraw(context, stave, processedNotes, { auto_beam: true });\n    });\n  }, [staves, clef, timeSignature, width, height]);\n\n  return <div ref={container} style={{ marginLeft: '10px' }} />;\n}\n\n// Imports and Setup: The necessary classes from the VexFlow library are imported and some constants are set up for layout configurations.\n// Component Initialization: The component accepts props for configuration, including the staves data, clef, time signature, and dimensions.\n// Rendering Logic: Inside useEffect, a renderer is initialized once using a ref to avoid re-creation on each render. The renderer is used to \n// set up and draw the musical staves and notes based on the provided data.\n// Stave and Note Processing: The notes are processed to ensure they are in the correct format for VexFlow. This includes ensuring that notes\n//  are structured correctly and converting them into StaveNote objects.\n// Rendering Container: The component returns a div element where the SVG renderer will attach the visual representation of the staves."],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}