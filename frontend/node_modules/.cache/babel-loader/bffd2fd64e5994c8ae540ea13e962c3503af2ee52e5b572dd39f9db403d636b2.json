{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Factory } from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualiser = ({\n  noteData\n}) => {\n  _s();\n  const vf = useRef(null);\n  useEffect(() => {\n    // Create the VexFlow instance\n    vf.current = new Factory({\n      renderer: {\n        elementId: 'output',\n        width: 500,\n        height: 200\n      }\n    });\n    const score = vf.current.EasyScore();\n    const system = vf.current.System();\n\n    // Assuming noteData is an array of note strings like ['C#5/q', 'B4', 'A4', 'G#4']\n    system.addStave({\n      voices: [score.voice(score.notes(...noteData))]\n    }).addClef('treble').addTimeSignature('4/4');\n    vf.current.draw();\n  }, [noteData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Music Notation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualiser, \"ajsHV126M09RUhqMFQ7hhoFTyu8=\");\n_c = MusicVisualiser;\nexport default MusicVisualiser;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualiser\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Factory","jsxDEV","_jsxDEV","MusicVisualiser","noteData","_s","vf","current","renderer","elementId","width","height","score","EasyScore","system","System","addStave","voices","voice","notes","addClef","addTimeSignature","draw","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Factory } from 'vexflow';\n\nconst MusicVisualiser = ({ noteData }) => {\n  const vf = useRef(null);\n\n  useEffect(() => {\n    // Create the VexFlow instance\n    vf.current = new Factory({\n      renderer: { elementId: 'output', width: 500, height: 200 },\n    });\n\n    const score = vf.current.EasyScore();\n    const system = vf.current.System();\n\n    // Assuming noteData is an array of note strings like ['C#5/q', 'B4', 'A4', 'G#4']\n    system\n      .addStave({\n        voices: [score.voice(score.notes(...noteData))],\n      })\n      .addClef('treble')\n      .addTimeSignature('4/4');\n\n    vf.current.draw();\n  }, [noteData]);\n\n  return (\n    <div>\n      <h2>Music Notation</h2>\n      <div id=\"output\"></div>\n    </div>\n  );\n};\n\nexport default MusicVisualiser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,OAAO,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAMC,EAAE,GAAGR,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd;IACAS,EAAE,CAACC,OAAO,GAAG,IAAIP,OAAO,CAAC;MACvBQ,QAAQ,EAAE;QAAEC,SAAS,EAAE,QAAQ;QAAEC,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI;IAC3D,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAGN,EAAE,CAACC,OAAO,CAACM,SAAS,CAAC,CAAC;IACpC,MAAMC,MAAM,GAAGR,EAAE,CAACC,OAAO,CAACQ,MAAM,CAAC,CAAC;;IAElC;IACAD,MAAM,CACHE,QAAQ,CAAC;MACRC,MAAM,EAAE,CAACL,KAAK,CAACM,KAAK,CAACN,KAAK,CAACO,KAAK,CAAC,GAAGf,QAAQ,CAAC,CAAC;IAChD,CAAC,CAAC,CACDgB,OAAO,CAAC,QAAQ,CAAC,CACjBC,gBAAgB,CAAC,KAAK,CAAC;IAE1Bf,EAAE,CAACC,OAAO,CAACe,IAAI,CAAC,CAAC;EACnB,CAAC,EAAE,CAAClB,QAAQ,CAAC,CAAC;EAEd,oBACEF,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBzB,OAAA;MAAK0B,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACtB,EAAA,CA7BIF,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AA+BrB,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}