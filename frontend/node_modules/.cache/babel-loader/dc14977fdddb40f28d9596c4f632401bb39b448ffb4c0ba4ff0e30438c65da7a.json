{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Factory } from 'vexflow';\nimport axios from 'axios'; // Make sure to import axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualizer = () => {\n  _s();\n  const isInitialMount = useRef(true);\n  const vf = useRef(null);\n  useEffect(() => {\n    // Skip the effect on hot updates\n    if (!isInitialMount.current) {\n      return;\n    }\n\n    // Fetch note data from your API\n    axios.get('http://localhost:5000/get_note_data').then(response => {\n      console.log('API Response:', response); // Log the entire response\n\n      const noteData = response.data.notes;\n      console.log(noteData);\n\n      // Create the VexFlow instance\n      vf.current = new Factory({\n        renderer: {\n          elementId: 'output',\n          width: 500,\n          height: 200\n        }\n      });\n      const score = vf.current.EasyScore();\n      const system = vf.current.System();\n\n      // Assuming noteData is an array of note strings like ['C#5/q', 'B4', 'A4', 'G#4']\n      system.addStave({\n        voices: [score.voice(score.notes(...noteData))]\n      }).addClef('treble').addTimeSignature('4/4');\n      vf.current.draw();\n      isInitialMount.current = false;\n    }).catch(error => console.error('Error parsing JSON or fetching notes:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Music Notation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualizer, \"8qQqGiuHkgl0elo6YV/e9hkAw2g=\");\n_c = MusicVisualizer;\nexport default MusicVisualizer;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","Factory","axios","jsxDEV","_jsxDEV","MusicVisualizer","_s","isInitialMount","vf","current","get","then","response","console","log","noteData","data","notes","renderer","elementId","width","height","score","EasyScore","system","System","addStave","voices","voice","addClef","addTimeSignature","draw","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Factory } from 'vexflow';\nimport axios from 'axios';  // Make sure to import axios\n\nconst MusicVisualizer = () => {\n  const isInitialMount = useRef(true);\n  const vf = useRef(null);\n\n  useEffect(() => {\n    // Skip the effect on hot updates\n    if (!isInitialMount.current) {\n      return;\n    }\n\n    // Fetch note data from your API\n    axios.get('http://localhost:5000/get_note_data')\n    \n      .then((response) => {\n        console.log('API Response:', response);  // Log the entire response\n\n        const noteData = response.data.notes;\n        console.log(noteData)\n\n        // Create the VexFlow instance\n        vf.current = new Factory({\n          renderer: { elementId: 'output', width: 500, height: 200 },\n        });\n\n        const score = vf.current.EasyScore();\n        const system = vf.current.System();\n\n        // Assuming noteData is an array of note strings like ['C#5/q', 'B4', 'A4', 'G#4']\n        system\n          .addStave({\n            voices: [score.voice(score.notes(...noteData))],\n          })\n          .addClef('treble')\n          .addTimeSignature('4/4');\n\n        vf.current.draw();\n\n        isInitialMount.current = false;\n      })\n      .catch(error => console.error('Error parsing JSON or fetching notes:', error));\n  }, []);\n\n  return (\n    <div>\n      <h2>Music Notation</h2>\n      <div id=\"output\"></div>\n    </div>\n  );\n};\n\nexport default MusicVisualizer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,OAAO,QAAQ,SAAS;AACjC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,cAAc,GAAGP,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMQ,EAAE,GAAGR,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACQ,cAAc,CAACE,OAAO,EAAE;MAC3B;IACF;;IAEA;IACAP,KAAK,CAACQ,GAAG,CAAC,qCAAqC,CAAC,CAE7CC,IAAI,CAAEC,QAAQ,IAAK;MAClBC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC,CAAC,CAAE;;MAEzC,MAAMG,QAAQ,GAAGH,QAAQ,CAACI,IAAI,CAACC,KAAK;MACpCJ,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;;MAErB;MACAP,EAAE,CAACC,OAAO,GAAG,IAAIR,OAAO,CAAC;QACvBiB,QAAQ,EAAE;UAAEC,SAAS,EAAE,QAAQ;UAAEC,KAAK,EAAE,GAAG;UAAEC,MAAM,EAAE;QAAI;MAC3D,CAAC,CAAC;MAEF,MAAMC,KAAK,GAAGd,EAAE,CAACC,OAAO,CAACc,SAAS,CAAC,CAAC;MACpC,MAAMC,MAAM,GAAGhB,EAAE,CAACC,OAAO,CAACgB,MAAM,CAAC,CAAC;;MAElC;MACAD,MAAM,CACHE,QAAQ,CAAC;QACRC,MAAM,EAAE,CAACL,KAAK,CAACM,KAAK,CAACN,KAAK,CAACL,KAAK,CAAC,GAAGF,QAAQ,CAAC,CAAC;MAChD,CAAC,CAAC,CACDc,OAAO,CAAC,QAAQ,CAAC,CACjBC,gBAAgB,CAAC,KAAK,CAAC;MAE1BtB,EAAE,CAACC,OAAO,CAACsB,IAAI,CAAC,CAAC;MAEjBxB,cAAc,CAACE,OAAO,GAAG,KAAK;IAChC,CAAC,CAAC,CACDuB,KAAK,CAACC,KAAK,IAAIpB,OAAO,CAACoB,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC,CAAC;EAClF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE7B,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBlC,OAAA;MAAKmC,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAAChC,EAAA,CAhDID,eAAe;AAAAmC,EAAA,GAAfnC,eAAe;AAkDrB,eAAeA,eAAe;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}