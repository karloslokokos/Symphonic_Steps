{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Vex from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MusicVisualizer() {\n  _s();\n  const [noteData, setNoteData] = useState([]);\n  useEffect(() => {\n    // Fetch note data from your Flask server\n    fetch('http://localhost:5000/get_note_data').then(response => response.json()).then(data => {\n      setNoteData(data); // Update the state with the fetched data\n    }).catch(error => console.error('Error fetching note data:', error));\n  }, []); // Empty dependency array to run the effect only once on mount\n  console.log(noteData);\n  useEffect(() => {\n    // Create an instance of VexFlow\n    const VF = Vex.Flow;\n    const container = document.getElementById('visualizer-container');\n    container.innerHTML = ''; // Clear previous content\n\n    // Check if noteData is not empty\n    if (noteData.length > 0) {\n      // Create a Vex.Flow Formatter and Voice\n      const formatter = new VF.Formatter().joinVoices([new VF.Voice({\n        time: '4/4'\n      })]);\n\n      // Map noteData to Vex.Flow StaveNotes\n      const notes = noteData.map(note => {\n        return new VF.StaveNote({\n          keys: [note],\n          duration: 'q'\n        });\n      });\n\n      // Format and draw the notes on the Vex.Flow stave\n      formatter.format([new VF.Voice().addTickables(notes)], 400); // Adjust width as needed\n      const stave = new VF.Stave(10, 0, 400); // Adjust position and width as needed\n      stave.addClef('treble').setContext(container).draw();\n      notes.forEach(note => note.setStave(stave).setContext(container).draw());\n    }\n  }, [noteData]); // Dependency array includes noteData\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Music Visualizer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"visualizer-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(MusicVisualizer, \"kFbI/fFNJdhEvBWyFfW6ZkH3ahs=\");\n_c = MusicVisualizer;\nexport default MusicVisualizer;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualizer\");","map":{"version":3,"names":["React","useEffect","useState","Vex","jsxDEV","_jsxDEV","MusicVisualizer","_s","noteData","setNoteData","fetch","then","response","json","data","catch","error","console","log","VF","Flow","container","document","getElementById","innerHTML","length","formatter","Formatter","joinVoices","Voice","time","notes","map","note","StaveNote","keys","duration","format","addTickables","stave","Stave","addClef","setContext","draw","forEach","setStave","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Vex from 'vexflow';\n\nfunction MusicVisualizer() {\n  const [noteData, setNoteData] = useState([]);\n\n  useEffect(() => {\n    // Fetch note data from your Flask server\n    fetch('http://localhost:5000/get_note_data')\n      .then(response => response.json())\n      .then(data => {\n        setNoteData(data); // Update the state with the fetched data\n      })\n      .catch(error => console.error('Error fetching note data:', error));\n  }, []); // Empty dependency array to run the effect only once on mount\n  console.log(noteData)\n\n  useEffect(() => {\n    // Create an instance of VexFlow\n    const VF = Vex.Flow;\n    const container = document.getElementById('visualizer-container');\n    container.innerHTML = ''; // Clear previous content\n\n    // Check if noteData is not empty\n    if (noteData.length > 0) {\n      // Create a Vex.Flow Formatter and Voice\n      const formatter = new VF.Formatter().joinVoices([new VF.Voice({ time: '4/4' })]);\n\n      // Map noteData to Vex.Flow StaveNotes\n      const notes = noteData.map((note) => {\n        return new VF.StaveNote({ keys: [note], duration: 'q' });\n      });\n\n      // Format and draw the notes on the Vex.Flow stave\n      formatter.format([new VF.Voice().addTickables(notes)], 400); // Adjust width as needed\n      const stave = new VF.Stave(10, 0, 400); // Adjust position and width as needed\n      stave.addClef('treble').setContext(container).draw();\n      notes.forEach((note) => note.setStave(stave).setContext(container).draw());\n    }\n  }, [noteData]); // Dependency array includes noteData\n\n  return (\n    <div>\n      <h1>Music Visualizer</h1>\n      <div id=\"visualizer-container\"></div>\n    </div>\n  );\n}\n\nexport default MusicVisualizer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd;IACAS,KAAK,CAAC,qCAAqC,CAAC,CACzCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZL,WAAW,CAACK,IAAI,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC;EACtE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACRC,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;EAErBP,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,EAAE,GAAGhB,GAAG,CAACiB,IAAI;IACnB,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,sBAAsB,CAAC;IACjEF,SAAS,CAACG,SAAS,GAAG,EAAE,CAAC,CAAC;;IAE1B;IACA,IAAIhB,QAAQ,CAACiB,MAAM,GAAG,CAAC,EAAE;MACvB;MACA,MAAMC,SAAS,GAAG,IAAIP,EAAE,CAACQ,SAAS,CAAC,CAAC,CAACC,UAAU,CAAC,CAAC,IAAIT,EAAE,CAACU,KAAK,CAAC;QAAEC,IAAI,EAAE;MAAM,CAAC,CAAC,CAAC,CAAC;;MAEhF;MACA,MAAMC,KAAK,GAAGvB,QAAQ,CAACwB,GAAG,CAAEC,IAAI,IAAK;QACnC,OAAO,IAAId,EAAE,CAACe,SAAS,CAAC;UAAEC,IAAI,EAAE,CAACF,IAAI,CAAC;UAAEG,QAAQ,EAAE;QAAI,CAAC,CAAC;MAC1D,CAAC,CAAC;;MAEF;MACAV,SAAS,CAACW,MAAM,CAAC,CAAC,IAAIlB,EAAE,CAACU,KAAK,CAAC,CAAC,CAACS,YAAY,CAACP,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MAC7D,MAAMQ,KAAK,GAAG,IAAIpB,EAAE,CAACqB,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;MACxCD,KAAK,CAACE,OAAO,CAAC,QAAQ,CAAC,CAACC,UAAU,CAACrB,SAAS,CAAC,CAACsB,IAAI,CAAC,CAAC;MACpDZ,KAAK,CAACa,OAAO,CAAEX,IAAI,IAAKA,IAAI,CAACY,QAAQ,CAACN,KAAK,CAAC,CAACG,UAAU,CAACrB,SAAS,CAAC,CAACsB,IAAI,CAAC,CAAC,CAAC;IAC5E;EACF,CAAC,EAAE,CAACnC,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACEH,OAAA;IAAAyC,QAAA,gBACEzC,OAAA;MAAAyC,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB7C,OAAA;MAAK8C,EAAE,EAAC;IAAsB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEV;AAAC3C,EAAA,CA5CQD,eAAe;AAAA8C,EAAA,GAAf9C,eAAe;AA8CxB,eAAeA,eAAe;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}