{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Factory } from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualizer = () => {\n  _s();\n  const isInitialMount = useRef(true);\n  const vf = useRef(null);\n  useEffect(() => {\n    // Skip the effect on hot updates\n    if (!isInitialMount.current) {\n      return;\n    }\n\n    // Fetch note data from your API using XMLHttpRequest\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://localhost:5000/get_note_data', true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        const response = JSON.parse(xhr.responseText);\n        const noteData = response.notes;\n\n        // Create the VexFlow instance\n        vf.current = new Factory({\n          renderer: {\n            elementId: 'output',\n            width: 500,\n            height: 200\n          }\n        });\n        const score = vf.current.EasyScore();\n        const system = vf.current.System();\n\n        // Assuming noteData is an array of note strings like ['C#5/q', 'B4', 'A4', 'G#4']\n        system.addStave({\n          voices: [score.voice(score.notes(...noteData))]\n        }).addClef('treble').addTimeSignature('4/4');\n        vf.current.draw();\n        isInitialMount.current = false;\n      }\n    };\n    xhr.send();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Music Notation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualizer, \"8qQqGiuHkgl0elo6YV/e9hkAw2g=\");\n_c = MusicVisualizer;\nexport default MusicVisualizer;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","Factory","jsxDEV","_jsxDEV","MusicVisualizer","_s","isInitialMount","vf","current","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","status","response","JSON","parse","responseText","noteData","notes","renderer","elementId","width","height","score","EasyScore","system","System","addStave","voices","voice","addClef","addTimeSignature","draw","send","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Factory } from 'vexflow';\n\nconst MusicVisualizer = () => {\n  const isInitialMount = useRef(true);\n  const vf = useRef(null);\n\n  useEffect(() => {\n    // Skip the effect on hot updates\n    if (!isInitialMount.current) {\n      return;\n    }\n\n    // Fetch note data from your API using XMLHttpRequest\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://localhost:5000/get_note_data', true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        const response = JSON.parse(xhr.responseText);\n        const noteData = response.notes;\n\n        // Create the VexFlow instance\n        vf.current = new Factory({\n          renderer: { elementId: 'output', width: 500, height: 200 },\n        });\n\n        const score = vf.current.EasyScore();\n        const system = vf.current.System();\n\n        // Assuming noteData is an array of note strings like ['C#5/q', 'B4', 'A4', 'G#4']\n        system\n          .addStave({\n            voices: [score.voice(score.notes(...noteData))],\n          })\n          .addClef('treble')\n          .addTimeSignature('4/4');\n\n        vf.current.draw();\n\n        isInitialMount.current = false;\n      }\n    };\n\n    xhr.send();\n  }, []);\n\n  return (\n    <div>\n      <h2>Music Notation</h2>\n      <div id=\"output\"></div>\n    </div>\n  );\n};\n\nexport default MusicVisualizer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,OAAO,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,cAAc,GAAGN,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMO,EAAE,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACO,cAAc,CAACE,OAAO,EAAE;MAC3B;IACF;;IAEA;IACA,MAAMC,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;IAChCD,GAAG,CAACE,IAAI,CAAC,KAAK,EAAE,qCAAqC,EAAE,IAAI,CAAC;IAC5DF,GAAG,CAACG,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAExDH,GAAG,CAACI,kBAAkB,GAAG,YAAY;MACnC,IAAIJ,GAAG,CAACK,UAAU,KAAK,CAAC,IAAIL,GAAG,CAACM,MAAM,KAAK,GAAG,EAAE;QAC9C,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACT,GAAG,CAACU,YAAY,CAAC;QAC7C,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,KAAK;;QAE/B;QACAd,EAAE,CAACC,OAAO,GAAG,IAAIP,OAAO,CAAC;UACvBqB,QAAQ,EAAE;YAAEC,SAAS,EAAE,QAAQ;YAAEC,KAAK,EAAE,GAAG;YAAEC,MAAM,EAAE;UAAI;QAC3D,CAAC,CAAC;QAEF,MAAMC,KAAK,GAAGnB,EAAE,CAACC,OAAO,CAACmB,SAAS,CAAC,CAAC;QACpC,MAAMC,MAAM,GAAGrB,EAAE,CAACC,OAAO,CAACqB,MAAM,CAAC,CAAC;;QAElC;QACAD,MAAM,CACHE,QAAQ,CAAC;UACRC,MAAM,EAAE,CAACL,KAAK,CAACM,KAAK,CAACN,KAAK,CAACL,KAAK,CAAC,GAAGD,QAAQ,CAAC,CAAC;QAChD,CAAC,CAAC,CACDa,OAAO,CAAC,QAAQ,CAAC,CACjBC,gBAAgB,CAAC,KAAK,CAAC;QAE1B3B,EAAE,CAACC,OAAO,CAAC2B,IAAI,CAAC,CAAC;QAEjB7B,cAAc,CAACE,OAAO,GAAG,KAAK;MAChC;IACF,CAAC;IAEDC,GAAG,CAAC2B,IAAI,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjC,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBtC,OAAA;MAAKuC,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACpC,EAAA,CAnDID,eAAe;AAAAuC,EAAA,GAAfvC,eAAe;AAqDrB,eAAeA,eAAe;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}