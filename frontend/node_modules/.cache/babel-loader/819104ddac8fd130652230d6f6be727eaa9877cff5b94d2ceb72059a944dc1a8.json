{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport BsNav from '../Containers/BsNav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MusicalStairsGame = () => {\n  _s();\n  // Define your tasks and associated notes here.\n  const allTasks = [{\n    name: 'Perfect 5th',\n    notes: ['C4', 'G4']\n  }, {\n    name: 'Major 3rd',\n    notes: ['C4', 'E4']\n  }, {\n    name: 'Perfect 4th',\n    notes: ['C4', 'F4']\n  }, {\n    name: 'Major 2nd',\n    notes: ['C4', 'D4']\n  }];\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Function to select a new task randomly.\n  const generateRandomTask = () => {\n    if (completedTasks.length === allTasks.length) {\n      setGameOver(true);\n      return;\n    }\n    let remainingTasks = allTasks.filter(task => !completedTasks.includes(task));\n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    const newTask = remainingTasks[randomIndex];\n    setCurrentTask(newTask);\n    setCompletedTasks(prevTasks => [...prevTasks, newTask]);\n  };\n\n  // Function to fetch note data and validate the current task.\n  const validateTask = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/get_note_data', {\n        params: {\n          limit: 2\n        } // Fetching the last 2 note entries for validation.\n      });\n\n      // Assuming the backend returns an array of strings representing note sequences.\n      const fetchedNotes = response.data;\n\n      // Check if any fetched note sequence matches the current task's notes.\n      const isValid = fetchedNotes.some(group => group.sort().join(',') === currentTask.notes.sort().join(','));\n      if (isValid) {\n        alert(\"Correct! Moving to the next task.\");\n        setScore(prevScore => prevScore + 1);\n        generateRandomTask(); // Move to the next task upon correct validation.\n      } else {\n        alert(\"Incorrect. Try again or complete the task manually.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching note data:\", error);\n    }\n  };\n\n  // Initial task generation upon component mount.\n  useState(() => {\n    generateRandomTask();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Play the Musical Stairs Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), currentTask ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Play the following chord or interval on the stairs: \", currentTask.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: validateTask,\n        children: \"Validate Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading task...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Game Over! Your score: \", score, \" out of \", allTasks.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // resetGame();\n          generateRandomTask();\n        },\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicalStairsGame, \"fJHQN8+6hPZFfDyh/fXvBtjH120=\");\n_c = MusicalStairsGame;\nexport default MusicalStairsGame;\nvar _c;\n$RefreshReg$(_c, \"MusicalStairsGame\");","map":{"version":3,"names":["React","useState","axios","BsNav","jsxDEV","_jsxDEV","Fragment","_Fragment","MusicalStairsGame","_s","allTasks","name","notes","completedTasks","setCompletedTasks","currentTask","setCurrentTask","score","setScore","gameOver","setGameOver","generateRandomTask","length","remainingTasks","filter","task","includes","randomIndex","Math","floor","random","newTask","prevTasks","validateTask","response","get","params","limit","fetchedNotes","data","isValid","some","group","sort","join","alert","prevScore","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport BsNav from '../Containers/BsNav';\n\nconst MusicalStairsGame = () => {\n  // Define your tasks and associated notes here.\n  const allTasks = [\n    { name: 'Perfect 5th', notes: ['C4', 'G4'] },\n    { name: 'Major 3rd', notes: ['C4', 'E4'] },\n    { name: 'Perfect 4th', notes: ['C4', 'F4'] },\n    { name: 'Major 2nd', notes: ['C4', 'D4'] },\n  ];\n\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  // Function to select a new task randomly.\n  const generateRandomTask = () => {\n    if (completedTasks.length === allTasks.length) {\n      setGameOver(true);\n      return;\n    }\n\n    let remainingTasks = allTasks.filter(task => !completedTasks.includes(task));\n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    const newTask = remainingTasks[randomIndex];\n    \n    setCurrentTask(newTask);\n    setCompletedTasks(prevTasks => [...prevTasks, newTask]);\n  };\n\n  // Function to fetch note data and validate the current task.\n  const validateTask = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/get_note_data', {\n        params: { limit: 2 } // Fetching the last 2 note entries for validation.\n      });\n\n      // Assuming the backend returns an array of strings representing note sequences.\n      const fetchedNotes = response.data; \n      \n      // Check if any fetched note sequence matches the current task's notes.\n      const isValid = fetchedNotes.some(group => \n        group.sort().join(',') === currentTask.notes.sort().join(',')\n      );\n\n      if (isValid) {\n        alert(\"Correct! Moving to the next task.\");\n        setScore(prevScore => prevScore + 1);\n        generateRandomTask(); // Move to the next task upon correct validation.\n      } else {\n        alert(\"Incorrect. Try again or complete the task manually.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching note data:\", error);\n    }\n  };\n\n  // Initial task generation upon component mount.\n  useState(() => {\n    generateRandomTask();\n  }, []);\n\n  return (\n    <div>\n      <BsNav />\n      <h1>Play the Musical Stairs Game</h1>\n      {currentTask ? (\n        <>\n          <p>Play the following chord or interval on the stairs: {currentTask.name}</p>\n          <button onClick={validateTask}>Validate Task</button>\n        </>\n      ) : (\n        <p>Loading task...</p>\n      )}\n      <p>Score: {score}</p>\n      {gameOver && (\n        <div>\n          <p>Game Over! Your score: {score} out of {allTasks.length}</p>\n          <button onClick={() => {\n            // resetGame();\n            generateRandomTask();\n          }}>Restart Game</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MusicalStairsGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}