{"ast":null,"code":"import { RuntimeError } from './util.js';\nexport class Music {\n  static get NUM_TONES() {\n    return this.canonical_notes.length;\n  }\n  static get roots() {\n    return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n  }\n  static get root_values() {\n    return [0, 2, 4, 5, 7, 9, 11];\n  }\n  static get root_indices() {\n    return {\n      c: 0,\n      d: 1,\n      e: 2,\n      f: 3,\n      g: 4,\n      a: 5,\n      b: 6\n    };\n  }\n  static get canonical_notes() {\n    return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n  }\n  static get diatonic_intervals() {\n    return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n  }\n  static get diatonic_accidentals() {\n    return {\n      unison: {\n        note: 0,\n        accidental: 0\n      },\n      m2: {\n        note: 1,\n        accidental: -1\n      },\n      M2: {\n        note: 1,\n        accidental: 0\n      },\n      m3: {\n        note: 2,\n        accidental: -1\n      },\n      M3: {\n        note: 2,\n        accidental: 0\n      },\n      p4: {\n        note: 3,\n        accidental: 0\n      },\n      dim5: {\n        note: 4,\n        accidental: -1\n      },\n      p5: {\n        note: 4,\n        accidental: 0\n      },\n      m6: {\n        note: 5,\n        accidental: -1\n      },\n      M6: {\n        note: 5,\n        accidental: 0\n      },\n      b7: {\n        note: 6,\n        accidental: -1\n      },\n      M7: {\n        note: 6,\n        accidental: 0\n      },\n      octave: {\n        note: 7,\n        accidental: 0\n      }\n    };\n  }\n  static get intervals() {\n    return {\n      u: 0,\n      unison: 0,\n      m2: 1,\n      b2: 1,\n      min2: 1,\n      S: 1,\n      H: 1,\n      2: 2,\n      M2: 2,\n      maj2: 2,\n      T: 2,\n      W: 2,\n      m3: 3,\n      b3: 3,\n      min3: 3,\n      M3: 4,\n      3: 4,\n      maj3: 4,\n      4: 5,\n      p4: 5,\n      '#4': 6,\n      b5: 6,\n      aug4: 6,\n      dim5: 6,\n      5: 7,\n      p5: 7,\n      '#5': 8,\n      b6: 8,\n      aug5: 8,\n      6: 9,\n      M6: 9,\n      maj6: 9,\n      b7: 10,\n      m7: 10,\n      min7: 10,\n      dom7: 10,\n      M7: 11,\n      maj7: 11,\n      8: 12,\n      octave: 12\n    };\n  }\n  static get scales() {\n    return {\n      major: [2, 2, 1, 2, 2, 2, 1],\n      minor: [2, 1, 2, 2, 1, 2, 2],\n      ionian: [2, 2, 1, 2, 2, 2, 1],\n      dorian: [2, 1, 2, 2, 2, 1, 2],\n      phyrgian: [1, 2, 2, 2, 1, 2, 2],\n      lydian: [2, 2, 2, 1, 2, 2, 1],\n      mixolydian: [2, 2, 1, 2, 2, 1, 2],\n      aeolian: [2, 1, 2, 2, 1, 2, 2],\n      locrian: [1, 2, 2, 1, 2, 2, 2]\n    };\n  }\n  static get scaleTypes() {\n    return {\n      M: Music.scales.major,\n      m: Music.scales.minor\n    };\n  }\n  static get accidentals() {\n    return ['bb', 'b', 'n', '#', '##'];\n  }\n  static get noteValues() {\n    return {\n      c: {\n        root_index: 0,\n        int_val: 0\n      },\n      cn: {\n        root_index: 0,\n        int_val: 0\n      },\n      'c#': {\n        root_index: 0,\n        int_val: 1\n      },\n      'c##': {\n        root_index: 0,\n        int_val: 2\n      },\n      cb: {\n        root_index: 0,\n        int_val: 11\n      },\n      cbb: {\n        root_index: 0,\n        int_val: 10\n      },\n      d: {\n        root_index: 1,\n        int_val: 2\n      },\n      dn: {\n        root_index: 1,\n        int_val: 2\n      },\n      'd#': {\n        root_index: 1,\n        int_val: 3\n      },\n      'd##': {\n        root_index: 1,\n        int_val: 4\n      },\n      db: {\n        root_index: 1,\n        int_val: 1\n      },\n      dbb: {\n        root_index: 1,\n        int_val: 0\n      },\n      e: {\n        root_index: 2,\n        int_val: 4\n      },\n      en: {\n        root_index: 2,\n        int_val: 4\n      },\n      'e#': {\n        root_index: 2,\n        int_val: 5\n      },\n      'e##': {\n        root_index: 2,\n        int_val: 6\n      },\n      eb: {\n        root_index: 2,\n        int_val: 3\n      },\n      ebb: {\n        root_index: 2,\n        int_val: 2\n      },\n      f: {\n        root_index: 3,\n        int_val: 5\n      },\n      fn: {\n        root_index: 3,\n        int_val: 5\n      },\n      'f#': {\n        root_index: 3,\n        int_val: 6\n      },\n      'f##': {\n        root_index: 3,\n        int_val: 7\n      },\n      fb: {\n        root_index: 3,\n        int_val: 4\n      },\n      fbb: {\n        root_index: 3,\n        int_val: 3\n      },\n      g: {\n        root_index: 4,\n        int_val: 7\n      },\n      gn: {\n        root_index: 4,\n        int_val: 7\n      },\n      'g#': {\n        root_index: 4,\n        int_val: 8\n      },\n      'g##': {\n        root_index: 4,\n        int_val: 9\n      },\n      gb: {\n        root_index: 4,\n        int_val: 6\n      },\n      gbb: {\n        root_index: 4,\n        int_val: 5\n      },\n      a: {\n        root_index: 5,\n        int_val: 9\n      },\n      an: {\n        root_index: 5,\n        int_val: 9\n      },\n      'a#': {\n        root_index: 5,\n        int_val: 10\n      },\n      'a##': {\n        root_index: 5,\n        int_val: 11\n      },\n      ab: {\n        root_index: 5,\n        int_val: 8\n      },\n      abb: {\n        root_index: 5,\n        int_val: 7\n      },\n      b: {\n        root_index: 6,\n        int_val: 11\n      },\n      bn: {\n        root_index: 6,\n        int_val: 11\n      },\n      'b#': {\n        root_index: 6,\n        int_val: 0\n      },\n      'b##': {\n        root_index: 6,\n        int_val: 1\n      },\n      bb: {\n        root_index: 6,\n        int_val: 10\n      },\n      bbb: {\n        root_index: 6,\n        int_val: 9\n      }\n    };\n  }\n  isValidNoteValue(note) {\n    return note >= 0 && note < Music.canonical_notes.length;\n  }\n  isValidIntervalValue(interval) {\n    return interval >= 0 && interval < Music.diatonic_intervals.length;\n  }\n  getNoteParts(noteString) {\n    if (!noteString || noteString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n    if (noteString.length > 3) {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n    const note = noteString.toLowerCase();\n    const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n    const match = regex.exec(note);\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n      return {\n        root,\n        accidental\n      };\n    } else {\n      throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n    }\n  }\n  getKeyParts(keyString) {\n    if (!keyString || keyString.length < 1) {\n      throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n    }\n    const key = keyString.toLowerCase();\n    const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n    const match = regex.exec(key);\n    if (match !== null) {\n      const root = match[1];\n      const accidental = match[2];\n      let type = match[3];\n      if (!type) type = 'M';\n      return {\n        root,\n        accidental,\n        type\n      };\n    } else {\n      throw new RuntimeError('BadArguments', \"Invalid key: \".concat(keyString));\n    }\n  }\n  getNoteValue(noteString) {\n    const value = Music.noteValues[noteString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', \"Invalid note name: \".concat(noteString));\n    }\n    return value.int_val;\n  }\n  getIntervalValue(intervalString) {\n    const value = Music.intervals[intervalString];\n    if (value === undefined) {\n      throw new RuntimeError('BadArguments', \"Invalid interval name: \".concat(intervalString));\n    }\n    return value;\n  }\n  getCanonicalNoteName(noteValue) {\n    if (!this.isValidNoteValue(noteValue)) {\n      throw new RuntimeError('BadArguments', \"Invalid note value: \".concat(noteValue));\n    }\n    return Music.canonical_notes[noteValue];\n  }\n  getCanonicalIntervalName(intervalValue) {\n    if (!this.isValidIntervalValue(intervalValue)) {\n      throw new RuntimeError('BadArguments', \"Invalid interval value: \".concat(intervalValue));\n    }\n    return Music.diatonic_intervals[intervalValue];\n  }\n  getRelativeNoteValue(noteValue, intervalValue) {\n    let direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', \"Invalid direction: \".concat(direction));\n    }\n    let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n    if (sum < 0) sum += Music.NUM_TONES;\n    return sum;\n  }\n  getRelativeNoteName(root, noteValue) {\n    const parts = this.getNoteParts(root);\n    const rootValue = this.getNoteValue(parts.root);\n    let interval = noteValue - rootValue;\n    if (Math.abs(interval) > Music.NUM_TONES - 3) {\n      let multiplier = 1;\n      if (interval > 0) multiplier = -1;\n      const reverse_interval = (noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES * multiplier;\n      if (Math.abs(reverse_interval) > 2) {\n        throw new RuntimeError('BadArguments', \"Notes not related: \".concat(root, \", \").concat(noteValue, \")\"));\n      } else {\n        interval = reverse_interval;\n      }\n    }\n    if (Math.abs(interval) > 2) {\n      throw new RuntimeError('BadArguments', \"Notes not related: \".concat(root, \", \").concat(noteValue, \")\"));\n    }\n    let relativeNoteName = parts.root;\n    if (interval > 0) {\n      for (let i = 1; i <= interval; ++i) {\n        relativeNoteName += '#';\n      }\n    } else if (interval < 0) {\n      for (let i = -1; i >= interval; --i) {\n        relativeNoteName += 'b';\n      }\n    }\n    return relativeNoteName;\n  }\n  getScaleTones(key, intervals) {\n    const tones = [key];\n    let nextNote = key;\n    for (let i = 0; i < intervals.length; i++) {\n      nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n      if (nextNote !== key) tones.push(nextNote);\n    }\n    return tones;\n  }\n  getIntervalBetween(note1, note2) {\n    let direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (direction !== 1 && direction !== -1) {\n      throw new RuntimeError('BadArguments', \"Invalid direction: \".concat(direction));\n    }\n    if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n      throw new RuntimeError('BadArguments', \"Invalid notes: \".concat(note1, \", \").concat(note2));\n    }\n    let difference = direction === 1 ? note2 - note1 : note1 - note2;\n    if (difference < 0) difference += Music.NUM_TONES;\n    return difference;\n  }\n  createScaleMap(keySignature) {\n    const keySigParts = this.getKeyParts(keySignature);\n    if (!keySigParts.type) throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n    const scaleName = Music.scaleTypes[keySigParts.type];\n    let keySigString = keySigParts.root;\n    if (keySigParts.accidental) keySigString += keySigParts.accidental;\n    if (!scaleName) throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n    const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n    const noteLocation = Music.root_indices[keySigParts.root];\n    const scaleMap = {};\n    for (let i = 0; i < Music.roots.length; ++i) {\n      const index = (noteLocation + i) % Music.roots.length;\n      const rootName = Music.roots[index];\n      let noteName = this.getRelativeNoteName(rootName, scale[i]);\n      if (noteName.length === 1) {\n        noteName += 'n';\n      }\n      scaleMap[rootName] = noteName;\n    }\n    return scaleMap;\n  }\n}","map":{"version":3,"names":["RuntimeError","Music","NUM_TONES","canonical_notes","length","roots","root_values","root_indices","c","d","e","f","g","a","b","diatonic_intervals","diatonic_accidentals","unison","note","accidental","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","octave","intervals","u","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","m","accidentals","noteValues","root_index","int_val","cn","cb","cbb","dn","db","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bb","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","toLowerCase","regex","match","exec","root","getKeyParts","keyString","key","type","concat","getNoteValue","value","undefined","getIntervalValue","intervalString","getCanonicalNoteName","noteValue","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","arguments","sum","getRelativeNoteName","parts","rootValue","Math","abs","multiplier","reverse_interval","relativeNoteName","i","getScaleTones","tones","nextNote","push","getIntervalBetween","note1","note2","difference","createScaleMap","keySignature","keySigParts","scaleName","keySigString","scale","noteLocation","scaleMap","index","rootName","noteName"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/node_modules/vexflow/build/esm/src/music.js"],"sourcesContent":["import { RuntimeError } from './util.js';\nexport class Music {\n    static get NUM_TONES() {\n        return this.canonical_notes.length;\n    }\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    static get root_values() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    static get root_indices() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    static get canonical_notes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    static get diatonic_intervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    static get diatonic_accidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    static get noteValues() {\n        return {\n            c: { root_index: 0, int_val: 0 },\n            cn: { root_index: 0, int_val: 0 },\n            'c#': { root_index: 0, int_val: 1 },\n            'c##': { root_index: 0, int_val: 2 },\n            cb: { root_index: 0, int_val: 11 },\n            cbb: { root_index: 0, int_val: 10 },\n            d: { root_index: 1, int_val: 2 },\n            dn: { root_index: 1, int_val: 2 },\n            'd#': { root_index: 1, int_val: 3 },\n            'd##': { root_index: 1, int_val: 4 },\n            db: { root_index: 1, int_val: 1 },\n            dbb: { root_index: 1, int_val: 0 },\n            e: { root_index: 2, int_val: 4 },\n            en: { root_index: 2, int_val: 4 },\n            'e#': { root_index: 2, int_val: 5 },\n            'e##': { root_index: 2, int_val: 6 },\n            eb: { root_index: 2, int_val: 3 },\n            ebb: { root_index: 2, int_val: 2 },\n            f: { root_index: 3, int_val: 5 },\n            fn: { root_index: 3, int_val: 5 },\n            'f#': { root_index: 3, int_val: 6 },\n            'f##': { root_index: 3, int_val: 7 },\n            fb: { root_index: 3, int_val: 4 },\n            fbb: { root_index: 3, int_val: 3 },\n            g: { root_index: 4, int_val: 7 },\n            gn: { root_index: 4, int_val: 7 },\n            'g#': { root_index: 4, int_val: 8 },\n            'g##': { root_index: 4, int_val: 9 },\n            gb: { root_index: 4, int_val: 6 },\n            gbb: { root_index: 4, int_val: 5 },\n            a: { root_index: 5, int_val: 9 },\n            an: { root_index: 5, int_val: 9 },\n            'a#': { root_index: 5, int_val: 10 },\n            'a##': { root_index: 5, int_val: 11 },\n            ab: { root_index: 5, int_val: 8 },\n            abb: { root_index: 5, int_val: 7 },\n            b: { root_index: 6, int_val: 11 },\n            bn: { root_index: 6, int_val: 11 },\n            'b#': { root_index: 6, int_val: 0 },\n            'b##': { root_index: 6, int_val: 1 },\n            bb: { root_index: 6, int_val: 10 },\n            bbb: { root_index: 6, int_val: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonical_notes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonic_intervals.length;\n    }\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.int_val;\n    }\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonical_notes[noteValue];\n    }\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonic_intervals[intervalValue];\n    }\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            const reverse_interval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverse_interval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverse_interval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.root_indices[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}