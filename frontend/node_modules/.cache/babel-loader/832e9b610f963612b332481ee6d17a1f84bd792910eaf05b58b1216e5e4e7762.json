{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BsNav from '../Containers/BsNav';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicalStairsGame = () => {\n  _s();\n  const apiUrl = \"http://localhost:5000\"; // Adjust as per your Flask app's URL\n  const allTasks = [{\n    name: 'Perfect 5th',\n    notes: ['C4', 'G4']\n  }, {\n    name: 'Major 3rd',\n    notes: ['C4', 'E4']\n  }, {\n    name: 'Perfect 4th',\n    notes: ['C4', 'F4']\n  }, {\n    name: 'Major 2nd',\n    notes: ['C4', 'D4']\n  }];\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    generateRandomTask();\n  }, []);\n  const generateRandomTask = () => {\n    if (completedTasks.length === allTasks.length) {\n      setGameOver(true);\n      return;\n    }\n    let remainingTasks = allTasks.filter(task => !completedTasks.includes(task.name));\n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    setCurrentTask(remainingTasks[randomIndex]);\n    setCompletedTasks([...completedTasks, remainingTasks[randomIndex].name]);\n  };\n  const fetchNoteDataAndValidate = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=2`); // Fetch last 2 note entries\n      const fetchedNotes = response.data; // Assuming this returns an array of note groups\n      console.log(\"Fetched Notes:\", fetchedNotes);\n\n      // Validate current task against fetched notes\n      const currentTaskNotes = currentTask.notes.join(', ');\n      const isValid = fetchedNotes.some(group => group.includes(currentTaskNotes));\n      console.log(\"Is Valid:\", isValid); // This is a simple check; you might need more complex validation logic\n\n      if (isValid) {\n        setScore(score + 1);\n        generateRandomTask(); // Proceed to next task on successful validation\n      } else {\n        // Handle validation failure (optional)\n      }\n    } catch (error) {\n      console.error(\"Error fetching note data:\", error);\n    }\n  };\n  useEffect(() => {\n    if (currentTask) {\n      fetchNoteDataAndValidate();\n    }\n  }, [currentTask]);\n  const handleTaskCompleted = () => {\n    // Placeholder for manual task completion\n    generateRandomTask();\n  };\n  const resetGame = () => {\n    setCompletedTasks([]);\n    setCurrentTask(null);\n    setScore(0);\n    setGameOver(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Play the Musical Stairs Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), currentTask && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Play the following chord or interval on the stairs: \", currentTask.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Game Over! Your score: \", score, \" out of \", completedTasks.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTaskCompleted,\n      children: \"Manually Complete Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicalStairsGame, \"lakbOp5ZUidXUYWPagIr4Ot9/Jw=\");\n_c = MusicalStairsGame;\nexport default MusicalStairsGame;\nvar _c;\n$RefreshReg$(_c, \"MusicalStairsGame\");","map":{"version":3,"names":["React","useState","useEffect","BsNav","axios","jsxDEV","_jsxDEV","MusicalStairsGame","_s","apiUrl","allTasks","name","notes","completedTasks","setCompletedTasks","currentTask","setCurrentTask","score","setScore","gameOver","setGameOver","generateRandomTask","length","remainingTasks","filter","task","includes","randomIndex","Math","floor","random","fetchNoteDataAndValidate","response","get","fetchedNotes","data","console","log","currentTaskNotes","join","isValid","some","group","error","handleTaskCompleted","resetGame","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BsNav from '../Containers/BsNav';\nimport axios from 'axios';\n\nconst MusicalStairsGame = () => {\n  const apiUrl = \"http://localhost:5000\"; // Adjust as per your Flask app's URL\n  const allTasks = [\n    { name: 'Perfect 5th', notes: ['C4', 'G4'] },\n    { name: 'Major 3rd', notes: ['C4', 'E4'] },\n    { name: 'Perfect 4th', notes: ['C4', 'F4'] },\n    { name: 'Major 2nd', notes: ['C4', 'D4'] },\n  ];\n\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    generateRandomTask();\n  }, []);\n\n  const generateRandomTask = () => {\n    if (completedTasks.length === allTasks.length) {\n      setGameOver(true);\n      return;\n    }\n    let remainingTasks = allTasks.filter(task => !completedTasks.includes(task.name));\n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    setCurrentTask(remainingTasks[randomIndex]);\n    setCompletedTasks([...completedTasks, remainingTasks[randomIndex].name]);\n  };\n\n  const fetchNoteDataAndValidate = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=2`); // Fetch last 2 note entries\n      const fetchedNotes = response.data; // Assuming this returns an array of note groups\n      console.log(\"Fetched Notes:\", fetchedNotes);\n\n      // Validate current task against fetched notes\n      const currentTaskNotes = currentTask.notes.join(', ');\n      const isValid = fetchedNotes.some(group => group.includes(currentTaskNotes));\n\n      console.log(\"Is Valid:\", isValid); // This is a simple check; you might need more complex validation logic\n\n      if (isValid) {\n        setScore(score + 1);\n        generateRandomTask(); // Proceed to next task on successful validation\n      } else {\n        // Handle validation failure (optional)\n      }\n    } catch (error) {\n      console.error(\"Error fetching note data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (currentTask) {\n      fetchNoteDataAndValidate();\n    }\n  }, [currentTask]);\n\n  const handleTaskCompleted = () => {\n    // Placeholder for manual task completion\n    generateRandomTask();\n  };\n\n  const resetGame = () => {\n    setCompletedTasks([]);\n    setCurrentTask(null);\n    setScore(0);\n    setGameOver(false);\n  };\n\n  return (\n    <div>\n      <BsNav />\n      <h1>Play the Musical Stairs Game</h1>\n      {currentTask && <p>Play the following chord or interval on the stairs: {currentTask.name}</p>}\n      <p>Score: {score}</p>\n      {gameOver ? (\n        <div>\n          <p>Game Over! Your score: {score} out of {completedTasks.length}</p>\n          <button onClick={resetGame}>Restart Game</button>\n        </div>\n      ) : (\n        <button onClick={handleTaskCompleted}>Manually Complete Task</button>\n      )}\n    </div>\n  );\n};\n\nexport default MusicalStairsGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}