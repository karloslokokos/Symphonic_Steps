{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/Score.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport VexFlow from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VF = VexFlow.Flow;\nconst {\n  Formatter,\n  Renderer,\n  Stave,\n  StaveNote\n} = VF;\nconst clefAndTimeWidth = 60;\nconst notesPerStave = 32;\nexport function Score({\n  staves = [],\n  clef = 'treble',\n  timeSignature = '4/4',\n  width = 1000,\n  height = 150\n}) {\n  _s();\n  const container = useRef();\n  const rendererRef = useRef();\n  useEffect(() => {\n    if (rendererRef.current == null) {\n      rendererRef.current = new Renderer(container.current, Renderer.Backends.SVG);\n    }\n    const renderer = rendererRef.current;\n    renderer.resize(width, height);\n    const context = renderer.getContext();\n    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');\n    let currX = 0;\n    let currStave;\n    const staveChunks = chunkArray(staves, notesPerStave);\n    staveChunks.forEach((staveNotes, i) => {\n      const staveWidth = (width - clefAndTimeWidth) / staveChunks.length;\n      const stave = new Stave(currX, 0, staveWidth);\n      if (i === 0) {\n        stave.setWidth(staveWidth + clefAndTimeWidth);\n        stave.addClef(clef).addTimeSignature(timeSignature);\n      }\n      currX += stave.getWidth();\n      stave.setContext(context).draw();\n      const processedNotes = staveNotes.map(note => {\n        if (typeof note === 'string') {\n          // Assuming the format is note + octave, e.g., 'C4'\n          const [noteName, octave] = note.match(/[a-zA-Z]+|[0-9]+/g);\n          return {\n            key: `${noteName}/${octave}`,\n            duration: 'q'\n          }; // Default duration is quarter note\n        } else {\n          return note; // If it's already an object, assume it has the correct format\n        }\n      }).map(({\n        key,\n        duration = 'q'\n      }) => {\n        // Assuming the format of 'key' is correct, e.g., 'C4'\n        return new StaveNote({\n          keys: [key],\n          duration: String(duration)\n        });\n      });\n      Formatter.FormatAndDraw(context, stave, processedNotes, {\n        auto_beam: true\n      });\n    });\n  }, [staves]);\n  const chunkArray = (arr, chunkSize) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i += chunkSize) {\n      result.push(arr.slice(i, i + chunkSize));\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n}\n_s(Score, \"Oo94nw6YKmif0GbcQr28f6bFgJU=\");\n_c = Score;\nvar _c;\n$RefreshReg$(_c, \"Score\");","map":{"version":3,"names":["React","useRef","useEffect","VexFlow","jsxDEV","_jsxDEV","VF","Flow","Formatter","Renderer","Stave","StaveNote","clefAndTimeWidth","notesPerStave","Score","staves","clef","timeSignature","width","height","_s","container","rendererRef","current","Backends","SVG","renderer","resize","context","getContext","setFont","setBackgroundFillStyle","currX","currStave","staveChunks","chunkArray","forEach","staveNotes","i","staveWidth","length","stave","setWidth","addClef","addTimeSignature","getWidth","setContext","draw","processedNotes","map","note","noteName","octave","match","key","duration","keys","String","FormatAndDraw","auto_beam","arr","chunkSize","result","push","slice","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/Score.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport VexFlow from 'vexflow';\n\nconst VF = VexFlow.Flow;\nconst { Formatter, Renderer, Stave, StaveNote } = VF;\n\nconst clefAndTimeWidth = 60;\nconst notesPerStave = 32;\n\nexport function Score({\n  staves = [],\n  clef = 'treble',\n  timeSignature = '4/4',\n  width = 1000,\n  height = 150,\n}) {\n  const container = useRef();\n  const rendererRef = useRef();\n\n  useEffect(() => {\n    if (rendererRef.current == null) {\n      rendererRef.current = new Renderer(container.current, Renderer.Backends.SVG);\n    }\n    const renderer = rendererRef.current;\n    renderer.resize(width, height);\n    const context = renderer.getContext();\n    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');\n\n    let currX = 0;\n    let currStave;\n\n    const staveChunks = chunkArray(staves, notesPerStave);\n\n    staveChunks.forEach((staveNotes, i) => {\n      const staveWidth = (width - clefAndTimeWidth) / staveChunks.length;\n      const stave = new Stave(currX, 0, staveWidth);\n\n      if (i === 0) {\n        stave.setWidth(staveWidth + clefAndTimeWidth);\n        stave.addClef(clef).addTimeSignature(timeSignature);\n      }\n\n      currX += stave.getWidth();\n      stave.setContext(context).draw();\n\nconst processedNotes = staveNotes\n  .map(note => {\n    if (typeof note === 'string') {\n      // Assuming the format is note + octave, e.g., 'C4'\n      const [noteName, octave] = note.match(/[a-zA-Z]+|[0-9]+/g);\n      return { key: `${noteName}/${octave}`, duration: 'q' }; // Default duration is quarter note\n    } else {\n      return note; // If it's already an object, assume it has the correct format\n    }\n  })\n  .map(({ key, duration = 'q' }) => {\n    // Assuming the format of 'key' is correct, e.g., 'C4'\n    return new StaveNote({\n      keys: [key],\n      duration: String(duration),\n    });\n  });\n\n      Formatter.FormatAndDraw(context, stave, processedNotes, {\n        auto_beam: true,\n      });\n    });\n  }, [staves]);\n\n  const chunkArray = (arr, chunkSize) => {\n    const result = [];\n    for (let i = 0; i < arr.length; i += chunkSize) {\n      result.push(arr.slice(i, i + chunkSize));\n    }\n    return result;\n  };\n\n  return <div ref={container} />;\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAOC,OAAO,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,EAAE,GAAGH,OAAO,CAACI,IAAI;AACvB,MAAM;EAAEC,SAAS;EAAEC,QAAQ;EAAEC,KAAK;EAAEC;AAAU,CAAC,GAAGL,EAAE;AAEpD,MAAMM,gBAAgB,GAAG,EAAE;AAC3B,MAAMC,aAAa,GAAG,EAAE;AAExB,OAAO,SAASC,KAAKA,CAAC;EACpBC,MAAM,GAAG,EAAE;EACXC,IAAI,GAAG,QAAQ;EACfC,aAAa,GAAG,KAAK;EACrBC,KAAK,GAAG,IAAI;EACZC,MAAM,GAAG;AACX,CAAC,EAAE;EAAAC,EAAA;EACD,MAAMC,SAAS,GAAGpB,MAAM,CAAC,CAAC;EAC1B,MAAMqB,WAAW,GAAGrB,MAAM,CAAC,CAAC;EAE5BC,SAAS,CAAC,MAAM;IACd,IAAIoB,WAAW,CAACC,OAAO,IAAI,IAAI,EAAE;MAC/BD,WAAW,CAACC,OAAO,GAAG,IAAId,QAAQ,CAACY,SAAS,CAACE,OAAO,EAAEd,QAAQ,CAACe,QAAQ,CAACC,GAAG,CAAC;IAC9E;IACA,MAAMC,QAAQ,GAAGJ,WAAW,CAACC,OAAO;IACpCG,QAAQ,CAACC,MAAM,CAACT,KAAK,EAAEC,MAAM,CAAC;IAC9B,MAAMS,OAAO,GAAGF,QAAQ,CAACG,UAAU,CAAC,CAAC;IACrCD,OAAO,CAACE,OAAO,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC,CAACC,sBAAsB,CAAC,MAAM,CAAC;IAE/D,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,SAAS;IAEb,MAAMC,WAAW,GAAGC,UAAU,CAACpB,MAAM,EAAEF,aAAa,CAAC;IAErDqB,WAAW,CAACE,OAAO,CAAC,CAACC,UAAU,EAAEC,CAAC,KAAK;MACrC,MAAMC,UAAU,GAAG,CAACrB,KAAK,GAAGN,gBAAgB,IAAIsB,WAAW,CAACM,MAAM;MAClE,MAAMC,KAAK,GAAG,IAAI/B,KAAK,CAACsB,KAAK,EAAE,CAAC,EAAEO,UAAU,CAAC;MAE7C,IAAID,CAAC,KAAK,CAAC,EAAE;QACXG,KAAK,CAACC,QAAQ,CAACH,UAAU,GAAG3B,gBAAgB,CAAC;QAC7C6B,KAAK,CAACE,OAAO,CAAC3B,IAAI,CAAC,CAAC4B,gBAAgB,CAAC3B,aAAa,CAAC;MACrD;MAEAe,KAAK,IAAIS,KAAK,CAACI,QAAQ,CAAC,CAAC;MACzBJ,KAAK,CAACK,UAAU,CAAClB,OAAO,CAAC,CAACmB,IAAI,CAAC,CAAC;MAEtC,MAAMC,cAAc,GAAGX,UAAU,CAC9BY,GAAG,CAACC,IAAI,IAAI;QACX,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAC5B;UACA,MAAM,CAACC,QAAQ,EAAEC,MAAM,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,mBAAmB,CAAC;UAC1D,OAAO;YAAEC,GAAG,EAAG,GAAEH,QAAS,IAAGC,MAAO,EAAC;YAAEG,QAAQ,EAAE;UAAI,CAAC,CAAC,CAAC;QAC1D,CAAC,MAAM;UACL,OAAOL,IAAI,CAAC,CAAC;QACf;MACF,CAAC,CAAC,CACDD,GAAG,CAAC,CAAC;QAAEK,GAAG;QAAEC,QAAQ,GAAG;MAAI,CAAC,KAAK;QAChC;QACA,OAAO,IAAI5C,SAAS,CAAC;UACnB6C,IAAI,EAAE,CAACF,GAAG,CAAC;UACXC,QAAQ,EAAEE,MAAM,CAACF,QAAQ;QAC3B,CAAC,CAAC;MACJ,CAAC,CAAC;MAEE/C,SAAS,CAACkD,aAAa,CAAC9B,OAAO,EAAEa,KAAK,EAAEO,cAAc,EAAE;QACtDW,SAAS,EAAE;MACb,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC5C,MAAM,CAAC,CAAC;EAEZ,MAAMoB,UAAU,GAAGA,CAACyB,GAAG,EAAEC,SAAS,KAAK;IACrC,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsB,GAAG,CAACpB,MAAM,EAAEF,CAAC,IAAIuB,SAAS,EAAE;MAC9CC,MAAM,CAACC,IAAI,CAACH,GAAG,CAACI,KAAK,CAAC1B,CAAC,EAAEA,CAAC,GAAGuB,SAAS,CAAC,CAAC;IAC1C;IACA,OAAOC,MAAM;EACf,CAAC;EAED,oBAAOzD,OAAA;IAAK4D,GAAG,EAAE5C;EAAU;IAAA6C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChC;AAACjD,EAAA,CArEeN,KAAK;AAAAwD,EAAA,GAALxD,KAAK;AAAA,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}