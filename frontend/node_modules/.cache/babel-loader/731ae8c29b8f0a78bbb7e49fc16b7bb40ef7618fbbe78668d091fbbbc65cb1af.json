{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { getSocket } from './SocketService';\nimport { Score } from './Score';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicVisualiser.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualiser = () => {\n  _s();\n  const [noteData, setNoteData] = useState([]);\n  const [refreshKey, setRefreshKey] = useState(0); // Add a refresh key state\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\n  const fetchNotes = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=16`);\n      setNoteData(response.data);\n      console.log('Note data fetched');\n      // Optionally, update the refresh key here if you want to force re-render every fetch\n    } catch (error) {\n      console.error('Error fetching note data:', error);\n    }\n  };\n  useEffect(() => {\n    fetchNotes();\n    const socket = getSocket();\n    socket.on('data_update', () => {\n      console.log('New data available signal received');\n      setRefreshKey(prevKey => prevKey + 1); // Update the refresh key to force re-render\n      fetchNotes();\n    });\n    return () => {\n      socket.off('data_update');\n    };\n  }, [apiUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainPage-page\",\n    children: [/*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-container\",\n        children: /*#__PURE__*/_jsxDEV(Score, {\n          className: \"Score\",\n          staves: noteData\n        }, refreshKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualiser, \"/PIiRNKk30oNrH9dQ7acYRTmTGU=\");\n_c = MusicVisualiser;\nexport default MusicVisualiser;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualiser\");","map":{"version":3,"names":["React","useEffect","useState","axios","getSocket","Score","BsNav","jsxDEV","_jsxDEV","MusicVisualiser","_s","noteData","setNoteData","refreshKey","setRefreshKey","apiUrl","process","env","REACT_APP_API_BASE_URL","fetchNotes","response","get","data","console","log","error","socket","on","prevKey","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","staves","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { getSocket } from './SocketService';\nimport { Score } from './Score';\nimport BsNav from '../Containers/BsNav';\nimport '../styles/MusicVisualiser.css';\n\nconst MusicVisualiser = () => {\n  const [noteData, setNoteData] = useState([]);\n  const [refreshKey, setRefreshKey] = useState(0); // Add a refresh key state\n  const apiUrl = process.env.REACT_APP_API_BASE_URL;\n\n  const fetchNotes = async () => {\n    try {\n      const response = await axios.get(`${apiUrl}/get_note_data?limit=16`);\n      setNoteData(response.data);\n      console.log('Note data fetched');\n      // Optionally, update the refresh key here if you want to force re-render every fetch\n    } catch (error) {\n      console.error('Error fetching note data:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchNotes();\n    const socket = getSocket();\n    \n    socket.on('data_update', () => {\n      console.log('New data available signal received');\n      setRefreshKey(prevKey => prevKey + 1); // Update the refresh key to force re-render\n      fetchNotes();\n    });\n\n    return () => {\n      socket.off('data_update');\n    };\n  }, [apiUrl]);\n\n  return (\n    <div className=\"MainPage-page\">\n      <BsNav />\n      <div className=\"centered-content\">\n        <div className=\"score-container\">\n          {/* Use the refreshKey as the key prop */}\n          <Score key={refreshKey} className=\"Score\" staves={noteData} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MusicVisualiser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,KAAK,QAAQ,SAAS;AAC/B,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAO,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,MAAMa,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAEjD,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAE,GAAEN,MAAO,yBAAwB,CAAC;MACpEH,WAAW,CAACQ,QAAQ,CAACE,IAAI,CAAC;MAC1BC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAEDxB,SAAS,CAAC,MAAM;IACdkB,UAAU,CAAC,CAAC;IACZ,MAAMO,MAAM,GAAGtB,SAAS,CAAC,CAAC;IAE1BsB,MAAM,CAACC,EAAE,CAAC,aAAa,EAAE,MAAM;MAC7BJ,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDV,aAAa,CAACc,OAAO,IAAIA,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;MACvCT,UAAU,CAAC,CAAC;IACd,CAAC,CAAC;IAEF,OAAO,MAAM;MACXO,MAAM,CAACG,GAAG,CAAC,aAAa,CAAC;IAC3B,CAAC;EACH,CAAC,EAAE,CAACd,MAAM,CAAC,CAAC;EAEZ,oBACEP,OAAA;IAAKsB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BvB,OAAA,CAACF,KAAK;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACT3B,OAAA;MAAKsB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC/BvB,OAAA;QAAKsB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAE9BvB,OAAA,CAACH,KAAK;UAAkByB,SAAS,EAAC,OAAO;UAACM,MAAM,EAAEzB;QAAS,GAA/CE,UAAU;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACzB,EAAA,CA1CID,eAAe;AAAA4B,EAAA,GAAf5B,eAAe;AA4CrB,eAAeA,eAAe;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}