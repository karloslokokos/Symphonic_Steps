{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/WebSocketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Provides a WebSocket connection through a React context, \n// allowing any component to easily connect to and use WebSocket \n// functionalities without repeatedly having to manage the connection state.\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebSocketContext = /*#__PURE__*/createContext(null);\nexport const WebSocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const newSocket = io(process.env.REACT_APP_WS_BASE_URL); // Your WebSocket server URL\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WebSocketContext.Provider, {\n    value: socket,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(WebSocketProvider, \"NvwYO9vJOwIMt5STdlMKfWhuxZw=\");\n_c = WebSocketProvider;\nexport const useWebSocket = () => {\n  _s2();\n  return useContext(WebSocketContext);\n};\n\n// In React, Context is a powerful feature that allows the user to share values (like state or configuration)\n//  across the component tree without having to explicitly pass props down through each level.\n// This can be particularly useful for any global state that needs to be accessed by many \n// components at different nesting levels of the application.\n\n// Context Creation:\n\n// A new context (WebSocketContext) is created to share a WebSocket connection across different components in a React application. \n// This avoids the need for each component to individually manage its own WebSocket connection.\n// WebSocket Provider Component:\n// This component (WebSocketProvider) initializes a WebSocket connection and provides it to all child components using the React Context API. \n// It ensures that the WebSocket connection is opened when the component mounts and cleanly closed when the component unmounts.\n// The WebSocket URL is retrieved from environment variables, which adds flexibility for different environments (development, staging, production) \n// \\without changing the source code.\n\n// State Management:\n\n// The useState hook is used to manage the WebSocket instance. This state is then provided across the application through the context provider.\n// Cleanup Function:\n\n// In the useEffect cleanup function, newSocket.close() is called. This is crucial to prevent memory leaks and ensure that the client \n// properly disconnects from the WebSocket server when the component or application is unmounted.\n// Custom Hook (useWebSocket):\n\n// A custom hook, useWebSocket, is exported to allow other components to access the WebSocket instance easily by calling this hook. \n// This pattern encapsulates the context usage and simplifies accessing the WebSocket connection throughout the application.\n_s2(useWebSocket, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"WebSocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","WebSocketContext","WebSocketProvider","children","_s","socket","setSocket","newSocket","process","env","REACT_APP_WS_BASE_URL","close","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWebSocket","_s2","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/WebSocketContext.js"],"sourcesContent":["// Provides a WebSocket connection through a React context, \n// allowing any component to easily connect to and use WebSocket \n// functionalities without repeatedly having to manage the connection state.\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst WebSocketContext = createContext(null);\n\nexport const WebSocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n\n  useEffect(() => {\n    const newSocket = io(process.env.REACT_APP_WS_BASE_URL); // Your WebSocket server URL\n    setSocket(newSocket);\n    return () => newSocket.close();\n  }, []);\n\n  return (\n    <WebSocketContext.Provider value={socket}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\nexport const useWebSocket = () => useContext(WebSocketContext);\n\n\n// In React, Context is a powerful feature that allows the user to share values (like state or configuration)\n//  across the component tree without having to explicitly pass props down through each level.\n// This can be particularly useful for any global state that needs to be accessed by many \n// components at different nesting levels of the application.\n\n// Context Creation:\n\n// A new context (WebSocketContext) is created to share a WebSocket connection across different components in a React application. \n// This avoids the need for each component to individually manage its own WebSocket connection.\n// WebSocket Provider Component:\n// This component (WebSocketProvider) initializes a WebSocket connection and provides it to all child components using the React Context API. \n// It ensures that the WebSocket connection is opened when the component mounts and cleanly closed when the component unmounts.\n// The WebSocket URL is retrieved from environment variables, which adds flexibility for different environments (development, staging, production) \n// \\without changing the source code.\n\n// State Management:\n\n// The useState hook is used to manage the WebSocket instance. This state is then provided across the application through the context provider.\n// Cleanup Function:\n\n// In the useEffect cleanup function, newSocket.close() is called. This is crucial to prevent memory leaks and ensure that the client \n// properly disconnects from the WebSocket server when the component or application is unmounted.\n// Custom Hook (useWebSocket):\n\n// A custom hook, useWebSocket, is exported to allow other components to access the WebSocket instance easily by calling this hook. \n// This pattern encapsulates the context usage and simplifies accessing the WebSocket connection throughout the application."],"mappings":";;;AAAA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,gBAAgB,gBAAGP,aAAa,CAAC,IAAI,CAAC;AAE5C,OAAO,MAAMQ,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,MAAMW,SAAS,GAAGT,EAAE,CAACU,OAAO,CAACC,GAAG,CAACC,qBAAqB,CAAC,CAAC,CAAC;IACzDJ,SAAS,CAACC,SAAS,CAAC;IACpB,OAAO,MAAMA,SAAS,CAACI,KAAK,CAAC,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA,CAACC,gBAAgB,CAACW,QAAQ;IAACC,KAAK,EAAER,MAAO;IAAAF,QAAA,EACtCA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAACb,EAAA,CAdWF,iBAAiB;AAAAgB,EAAA,GAAjBhB,iBAAiB;AAgB9B,OAAO,MAAMiB,YAAY,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzB,UAAU,CAACM,gBAAgB,CAAC;AAAA;;AAG9D;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAAmB,GAAA,CA5BaD,YAAY;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}