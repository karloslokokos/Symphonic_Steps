{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/components/musicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Score } from './score';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction chunkArray(array, chunkSize) {\n  const chunks = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    chunks.push(array.slice(i, i + chunkSize));\n  }\n  return chunks;\n}\nfunction MusicVisualiser() {\n  _s();\n  const [noteData, setNoteData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/get_note_data');\n        setNoteData(response.data);\n        console.log('Note data fetched:', response.data);\n      } catch (error) {\n        console.error('Error fetching note data:', error);\n      }\n    };\n    fetchData(); // Call the fetchData function when the component mounts\n  }, []); // The empty dependency array ensures that this effect runs only once on mount\n\n  // Split noteData into chunks of 32 notes\n  const stavesChunks = chunkArray(noteData, 32);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainPage-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Music Notation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), stavesChunks.map((stavesChunk, index) => /*#__PURE__*/_jsxDEV(Score, {\n        staves: stavesChunk\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)), stavesChunks.map((stavesChunk, index) => /*#__PURE__*/_jsxDEV(Score, {\n        staves: stavesChunk\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(MusicVisualiser, \"A9SqIwvYJAQmbQJuylu2O/Ct1EY=\");\n_c = MusicVisualiser;\nexport default MusicVisualiser;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualiser\");","map":{"version":3,"names":["React","useState","useEffect","axios","Score","jsxDEV","_jsxDEV","chunkArray","array","chunkSize","chunks","i","length","push","slice","MusicVisualiser","_s","noteData","setNoteData","fetchData","response","get","data","console","log","error","stavesChunks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","stavesChunk","index","staves","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/components/musicVisualiser.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Score } from './score';\n\nfunction chunkArray(array, chunkSize) {\n  const chunks = [];\n  for (let i = 0; i < array.length; i += chunkSize) {\n    chunks.push(array.slice(i, i + chunkSize));\n  }\n  return chunks;\n}\n\nfunction MusicVisualiser() {\n  const [noteData, setNoteData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/get_note_data');\n        setNoteData(response.data);\n        console.log('Note data fetched:', response.data);\n      } catch (error) {\n        console.error('Error fetching note data:', error);\n      }\n    };\n\n    fetchData(); // Call the fetchData function when the component mounts\n  }, []); // The empty dependency array ensures that this effect runs only once on mount\n\n  // Split noteData into chunks of 32 notes\n  const stavesChunks = chunkArray(noteData, 32);\n\n  return (\n    <div className=\"MainPage-page\">\n   \n      \n      <div>\n\n      <h1>Music Notation</h1>\n      {stavesChunks.map((stavesChunk, index) => (\n        <Score key={index} staves={stavesChunk} />\n      ))}\n       {stavesChunks.map((stavesChunk, index) => (\n        <Score key={index} staves={stavesChunk} />\n      ))}\n      </div>\n    </div>\n    \n    \n    \n  );\n  \n}\n\n\nexport default MusicVisualiser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,UAAUA,CAACC,KAAK,EAAEC,SAAS,EAAE;EACpC,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,IAAIF,SAAS,EAAE;IAChDC,MAAM,CAACG,IAAI,CAACL,KAAK,CAACM,KAAK,CAACH,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAAC,CAAC;EAC5C;EACA,OAAOC,MAAM;AACf;AAEA,SAASK,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,qCAAqC,CAAC;QACvEH,WAAW,CAACE,QAAQ,CAACE,IAAI,CAAC;QAC1BC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,QAAQ,CAACE,IAAI,CAAC;MAClD,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAEDN,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMO,YAAY,GAAGnB,UAAU,CAACU,QAAQ,EAAE,EAAE,CAAC;EAE7C,oBACEX,OAAA;IAAKqB,SAAS,EAAC,eAAe;IAAAC,QAAA,eAG5BtB,OAAA;MAAAsB,QAAA,gBAEAtB,OAAA;QAAAsB,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACtBN,YAAY,CAACO,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBACnC7B,OAAA,CAACF,KAAK;QAAagC,MAAM,EAAEF;MAAY,GAA3BC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAwB,CAC1C,CAAC,EACAN,YAAY,CAACO,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBACpC7B,OAAA,CAACF,KAAK;QAAagC,MAAM,EAAEF;MAAY,GAA3BC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAwB,CAC1C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAMV;AAAChB,EAAA,CAxCQD,eAAe;AAAAsB,EAAA,GAAftB,eAAe;AA2CxB,eAAeA,eAAe;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}