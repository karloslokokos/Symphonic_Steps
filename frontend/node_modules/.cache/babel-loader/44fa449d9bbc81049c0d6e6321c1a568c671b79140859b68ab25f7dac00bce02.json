{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/Score.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport VexFlow from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VF = VexFlow.Flow;\nconst {\n  Formatter,\n  Renderer,\n  Stave,\n  StaveNote\n} = VF;\nconst clefAndTimeWidth = 60;\nexport function Score({\n  staves = [],\n  clef = 'treble',\n  timeSignature = '4/4',\n  width = 500,\n  height = 150\n}) {\n  _s();\n  const container = useRef();\n  const rendererRef = useRef();\n  useEffect(() => {\n    if (rendererRef.current == null) {\n      rendererRef.current = new Renderer(container.current, Renderer.Backends.SVG);\n    }\n    const renderer = rendererRef.current;\n    renderer.resize(width, height);\n    const context = renderer.getContext();\n    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');\n    const barsPerStave = 8;\n    const notesPerBar = 4;\n    const staveWidth = (width - clefAndTimeWidth) / barsPerStave;\n    let currX = 0;\n    let barCount = 0;\n    staves.forEach((notes, i) => {\n      const stave = new Stave(currX, 0, staveWidth);\n      if (i === 0 || barCount % barsPerStave === 0) {\n        stave.setWidth(staveWidth + clefAndTimeWidth);\n        stave.addClef(clef).addTimeSignature(timeSignature);\n        currX += stave.getWidth();\n      } else {\n        currX += staveWidth;\n      }\n      stave.setContext(context).draw();\n      const processedNotes = notes.map(note => typeof note === 'string' ? {\n        key: note\n      } : note).map(note => Array.isArray(note) ? {\n        key: note[0],\n        duration: note[1]\n      } : note).map(({\n        key,\n        ...rest\n      }) => ({\n        key: typeof key === 'string' ? `${key[0]}/${key.slice(1)}` : key,\n        ...rest\n      })).map(({\n        key,\n        keys,\n        duration = 'q'\n      }) => new StaveNote({\n        keys: key ? [key] : keys,\n        duration: String(duration)\n      }));\n      Formatter.FormatAndDraw(context, stave, processedNotes, {\n        auto_beam: true\n      });\n      barCount += 1;\n    });\n  }, [staves]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n}\n_s(Score, \"Oo94nw6YKmif0GbcQr28f6bFgJU=\");\n_c = Score;\nvar _c;\n$RefreshReg$(_c, \"Score\");","map":{"version":3,"names":["React","useRef","useEffect","VexFlow","jsxDEV","_jsxDEV","VF","Flow","Formatter","Renderer","Stave","StaveNote","clefAndTimeWidth","Score","staves","clef","timeSignature","width","height","_s","container","rendererRef","current","Backends","SVG","renderer","resize","context","getContext","setFont","setBackgroundFillStyle","barsPerStave","notesPerBar","staveWidth","currX","barCount","forEach","notes","i","stave","setWidth","addClef","addTimeSignature","getWidth","setContext","draw","processedNotes","map","note","key","Array","isArray","duration","rest","slice","keys","String","FormatAndDraw","auto_beam","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/Score.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport VexFlow from 'vexflow';\n\nconst VF = VexFlow.Flow;\nconst { Formatter, Renderer, Stave, StaveNote } = VF;\n\nconst clefAndTimeWidth = 60;\n\nexport function Score({\n  staves = [],\n  clef = 'treble',\n  timeSignature = '4/4',\n  width = 500,\n  height = 150,\n}) {\n  const container = useRef();\n  const rendererRef = useRef();\n\n  useEffect(() => {\n    if (rendererRef.current == null) {\n      rendererRef.current = new Renderer(container.current, Renderer.Backends.SVG);\n    }\n    const renderer = rendererRef.current;\n    renderer.resize(width, height);\n    const context = renderer.getContext();\n    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');\n\n    const barsPerStave = 8;\n    const notesPerBar = 4;\n    const staveWidth = (width - clefAndTimeWidth) / barsPerStave;\n\n    let currX = 0;\n    let barCount = 0;\n\n    staves.forEach((notes, i) => {\n      const stave = new Stave(currX, 0, staveWidth);\n\n      if (i === 0 || barCount % barsPerStave === 0) {\n        stave.setWidth(staveWidth + clefAndTimeWidth);\n        stave.addClef(clef).addTimeSignature(timeSignature);\n        currX += stave.getWidth();\n      } else {\n        currX += staveWidth;\n      }\n\n      stave.setContext(context).draw();\n\n      const processedNotes = notes\n        .map((note) => (typeof note === 'string' ? { key: note } : note))\n        .map((note) =>\n          Array.isArray(note) ? { key: note[0], duration: note[1] } : note\n        )\n        .map(({ key, ...rest }) => ({\n          key: typeof key === 'string' ? `${key[0]}/${key.slice(1)}` : key,\n          ...rest,\n        }))\n        .map(({ key, keys, duration = 'q' }) => new StaveNote({\n          keys: key ? [key] : keys,\n          duration: String(duration),\n        }));\n\n      Formatter.FormatAndDraw(context, stave, processedNotes, {\n        auto_beam: true,\n      });\n\n      barCount += 1;\n    });\n  }, [staves]);\n\n  return <div ref={container} />;\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}