{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport BsNav from '../Containers/BsNav';\nimport Vex from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicalStairsGame = () => {\n  _s();\n  const allTasks = [{\n    name: 'Major 3rd',\n    notes: 'E4, G4'\n  },\n  // Use VexFlow note string format\n  {\n    name: 'Perfect 4th',\n    notes: 'D4, G4'\n  }, {\n    name: 'Major 2nd',\n    notes: 'C4, D4'\n  }, {\n    name: 'Perfect 5th',\n    notes: 'C4, G4'\n  }];\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState({});\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!currentTask.notes || !canvasRef.current) return;\n    const VF = Vex.Flow;\n    const canvas = canvasRef.current;\n    const renderer = new VF.Renderer(canvas, VF.Renderer.Backends.CANVAS);\n    const context = renderer.getContext();\n    context.clearRect(0, 0, canvas.width, canvas.height); // Ensure we clear canvas before drawing new notes\n\n    const stave = new VF.Stave(10, 0, 400);\n    stave.addClef(\"treble\").addTimeSignature(\"4/4\");\n    stave.setContext(context).draw();\n\n    // Since we're treating notes individually, split and map each note as a separate StaveNote\n    const notesArray = currentTask.notes.split(',').map(noteString => {\n      // Ensure proper note formatting\n      return new VF.StaveNote({\n        keys: [noteString.trim()],\n        // Correctly format note string\n        duration: \"q\"\n      });\n    });\n\n    // Create a voice and add the notes\n    const voice = new VF.Voice({\n      num_beats: 4,\n      beat_value: 4\n    }).addTickables(notesArray);\n\n    // Format and draw\n    new VF.Formatter().joinVoices([voice]).format([voice], 400);\n    voice.draw(context, stave);\n  }, [currentTask]);\n  const generateRandomTask = () => {\n    if (completedTasks.length === allTasks.length) {\n      setGameOver(true);\n      return;\n    }\n    let remainingTasks = allTasks.filter(task => !completedTasks.find(ct => ct.name === task.name));\n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    const newTask = remainingTasks[randomIndex];\n    setCompletedTasks(prevTasks => [...prevTasks, newTask]);\n    setCurrentTask(newTask);\n  };\n  const handleTaskCompleted = () => {\n    setScore(score + 1);\n    generateRandomTask();\n  };\n  const resetGame = () => {\n    setCompletedTasks([]);\n    setScore(0);\n    setGameOver(false);\n    generateRandomTask();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Play the Musical Stairs Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Play the following chord or interval on the stairs: \", currentTask.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 500,\n      height: 200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), gameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Game Over! Your score: \", score, \" out of \", completedTasks.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTaskCompleted,\n      children: \"Complete Task & Generate New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicalStairsGame, \"emPUTtgmwdmHPQzv3Zcr38EaawE=\");\n_c = MusicalStairsGame;\nexport default MusicalStairsGame;\nvar _c;\n$RefreshReg$(_c, \"MusicalStairsGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BsNav","Vex","jsxDEV","_jsxDEV","MusicalStairsGame","_s","allTasks","name","notes","completedTasks","setCompletedTasks","currentTask","setCurrentTask","score","setScore","gameOver","setGameOver","canvasRef","current","VF","Flow","canvas","renderer","Renderer","Backends","CANVAS","context","getContext","clearRect","width","height","stave","Stave","addClef","addTimeSignature","setContext","draw","notesArray","split","map","noteString","StaveNote","keys","trim","duration","voice","Voice","num_beats","beat_value","addTickables","Formatter","joinVoices","format","generateRandomTask","length","remainingTasks","filter","task","find","ct","randomIndex","Math","floor","random","newTask","prevTasks","handleTaskCompleted","resetGame","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport BsNav from '../Containers/BsNav';\nimport Vex from 'vexflow';\n\nconst MusicalStairsGame = () => {\n  const allTasks = [\n    { name: 'Major 3rd', notes: 'E4, G4' }, // Use VexFlow note string format\n    { name: 'Perfect 4th', notes: 'D4, G4' },\n    { name: 'Major 2nd', notes: 'C4, D4' },\n    { name: 'Perfect 5th', notes: 'C4, G4' },\n  ];\n\n  const [completedTasks, setCompletedTasks] = useState([]);\n  const [currentTask, setCurrentTask] = useState({});\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (!currentTask.notes || !canvasRef.current) return;\n    \n    const VF = Vex.Flow;\n    const canvas = canvasRef.current;\n    const renderer = new VF.Renderer(canvas, VF.Renderer.Backends.CANVAS);\n    const context = renderer.getContext();\n    context.clearRect(0, 0, canvas.width, canvas.height); // Ensure we clear canvas before drawing new notes\n  \n    const stave = new VF.Stave(10, 0, 400);\n    stave.addClef(\"treble\").addTimeSignature(\"4/4\");\n    stave.setContext(context).draw();\n    \n    // Since we're treating notes individually, split and map each note as a separate StaveNote\n    const notesArray = currentTask.notes.split(',').map(noteString => {\n      // Ensure proper note formatting\n      return new VF.StaveNote({\n        keys: [noteString.trim()], // Correctly format note string\n        duration: \"q\"\n      });\n    });\n    \n    // Create a voice and add the notes\n    const voice = new VF.Voice({num_beats: 4, beat_value: 4}).addTickables(notesArray);\n    \n    // Format and draw\n    new VF.Formatter().joinVoices([voice]).format([voice], 400);\n    voice.draw(context, stave);\n  \n  }, [currentTask]);\n  \n  \n  \n  \n  const generateRandomTask = () => {\n    if (completedTasks.length === allTasks.length) {\n      setGameOver(true);\n      return;\n    }\n\n    let remainingTasks = allTasks.filter(task => !completedTasks.find(ct => ct.name === task.name));\n    const randomIndex = Math.floor(Math.random() * remainingTasks.length);\n    const newTask = remainingTasks[randomIndex];\n\n    setCompletedTasks(prevTasks => [...prevTasks, newTask]);\n    setCurrentTask(newTask);\n  };\n\n  const handleTaskCompleted = () => {\n    setScore(score + 1);\n    generateRandomTask();\n  };\n\n  const resetGame = () => {\n    setCompletedTasks([]);\n    setScore(0);\n    setGameOver(false);\n    generateRandomTask();\n  };\n\n  return (\n    <div>\n      <BsNav />\n      <h1>Play the Musical Stairs Game</h1>\n      <p>Play the following chord or interval on the stairs: {currentTask.name}</p>\n      <canvas ref={canvasRef} width={500} height={200} />\n      <p>Score: {score}</p>\n      {gameOver ? (\n        <div>\n          <p>Game Over! Your score: {score} out of {completedTasks.length}</p>\n          <button onClick={resetGame}>Restart Game</button>\n        </div>\n      ) : (\n        <button onClick={handleTaskCompleted}>Complete Task & Generate New Task</button>\n      )}\n    </div>\n  );\n};\n\nexport default MusicalStairsGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}