{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Factory, EasyScore, Renderer } from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualiser = () => {\n  _s();\n  const [notes, setNotes] = useState([]);\n  useEffect(() => {\n    // Fetch note data from your database\n    const fetchNotes = async () => {\n      try {\n        // Replace this with your API endpoint for fetching notes\n        const response = await fetch('/api/get_note_data');\n        const data = await response.json();\n\n        // Update the state with the fetched notes\n        setNotes(data.notes);\n      } catch (error) {\n        console.error('Error fetching notes:', error);\n      }\n    };\n\n    // Call the fetchNotes function\n    fetchNotes();\n  }, []); // Run the effect only once when the component mounts\n\n  useEffect(() => {\n    // Render the notes using Vexflow when the notes state changes\n    const renderNotes = () => {\n      const vf = new Factory({\n        renderer: {\n          elementId: 'vexflow-container',\n          width: 400,\n          height: 100\n        }\n      });\n      const score = vf.EasyScore();\n      const system = vf.System();\n\n      // Add stave with the fetched notes\n      system.addStave({\n        voices: [score.voice(notes.join(', '))]\n      });\n\n      // Draw the Vexflow notation\n      vf.draw();\n    };\n\n    // Call the renderNotes function\n    renderNotes();\n  }, [notes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Music Notation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"vexflow-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualiser, \"eI97U74WWn7LZv8elnKHdI/J0uk=\");\n_c = MusicVisualiser;\nexport default MusicVisualiser;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualiser\");","map":{"version":3,"names":["React","useState","useEffect","Factory","EasyScore","Renderer","jsxDEV","_jsxDEV","MusicVisualiser","_s","notes","setNotes","fetchNotes","response","fetch","data","json","error","console","renderNotes","vf","renderer","elementId","width","height","score","system","System","addStave","voices","voice","join","draw","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Factory, EasyScore, Renderer } from 'vexflow';\n\nconst MusicVisualiser = () => {\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() => {\n    // Fetch note data from your database\n    const fetchNotes = async () => {\n      try {\n        // Replace this with your API endpoint for fetching notes\n        const response = await fetch('/api/get_note_data');\n        const data = await response.json();\n\n        // Update the state with the fetched notes\n        setNotes(data.notes);\n      } catch (error) {\n        console.error('Error fetching notes:', error);\n      }\n    };\n\n    // Call the fetchNotes function\n    fetchNotes();\n  }, []); // Run the effect only once when the component mounts\n\n  useEffect(() => {\n    // Render the notes using Vexflow when the notes state changes\n    const renderNotes = () => {\n      const vf = new Factory({ renderer: { elementId: 'vexflow-container', width: 400, height: 100 } });\n      const score = vf.EasyScore();\n      const system = vf.System();\n\n      // Add stave with the fetched notes\n      system.addStave({\n        voices: [score.voice(notes.join(', '))],\n      });\n\n      // Draw the Vexflow notation\n      vf.draw();\n    };\n\n    // Call the renderNotes function\n    renderNotes();\n  }, [notes]);\n\n  return (\n    <div>\n      <h2>Music Notation</h2>\n      <div id=\"vexflow-container\"></div>\n    </div>\n  );\n};\n\nexport default MusicVisualiser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,CAAC;QAClD,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACAL,QAAQ,CAACI,IAAI,CAACL,KAAK,CAAC;MACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;;IAED;IACAL,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAERV,SAAS,CAAC,MAAM;IACd;IACA,MAAMiB,WAAW,GAAGA,CAAA,KAAM;MACxB,MAAMC,EAAE,GAAG,IAAIjB,OAAO,CAAC;QAAEkB,QAAQ,EAAE;UAAEC,SAAS,EAAE,mBAAmB;UAAEC,KAAK,EAAE,GAAG;UAAEC,MAAM,EAAE;QAAI;MAAE,CAAC,CAAC;MACjG,MAAMC,KAAK,GAAGL,EAAE,CAAChB,SAAS,CAAC,CAAC;MAC5B,MAAMsB,MAAM,GAAGN,EAAE,CAACO,MAAM,CAAC,CAAC;;MAE1B;MACAD,MAAM,CAACE,QAAQ,CAAC;QACdC,MAAM,EAAE,CAACJ,KAAK,CAACK,KAAK,CAACpB,KAAK,CAACqB,IAAI,CAAC,IAAI,CAAC,CAAC;MACxC,CAAC,CAAC;;MAEF;MACAX,EAAE,CAACY,IAAI,CAAC,CAAC;IACX,CAAC;;IAED;IACAb,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACT,KAAK,CAAC,CAAC;EAEX,oBACEH,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvB9B,OAAA;MAAK+B,EAAE,EAAC;IAAmB;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAhDID,eAAe;AAAA+B,EAAA,GAAf/B,eAAe;AAkDrB,eAAeA,eAAe;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}