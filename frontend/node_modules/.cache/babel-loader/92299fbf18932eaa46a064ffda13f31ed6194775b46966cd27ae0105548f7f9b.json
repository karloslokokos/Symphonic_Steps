{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BsNav from '../Containers/BsNav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicalStairsGame = () => {\n  _s();\n  const allTasks = ['Major triad', 'Minor Triad', 'Perfect 5th', 'Major 3rd', 'Minor 7th', 'Perfect 4th', 'Major 2nd', 'Minor 3rd', 'Minor 2nd'];\n  const [availableTasks, setAvailableTasks] = useState([...allTasks]);\n  const [currentTask, setCurrentTask] = useState('');\n  const [score, setScore] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  useEffect(() => {\n    generateRandomTask();\n  }, []); // Empty dependency array ensures this effect runs once on mount\n\n  const generateRandomTask = () => {\n    if (availableTasks.length === 0) {\n      // Reset the available tasks when all tasks have been completed\n      setAvailableTasks([...allTasks]);\n    }\n    const randomIndex = Math.floor(Math.random() * availableTasks.length);\n    const newTask = availableTasks[randomIndex];\n\n    // Remove the selected task from the available tasks\n    setAvailableTasks(prevTasks => prevTasks.filter(task => task !== newTask));\n    setCurrentTask(newTask);\n  };\n  const handleTaskCompleted = () => {\n    // Check the user input against the data in the database\n    // Replace this logic with your actual comparison against the database\n\n    // Assuming you have a function to check the user input against the database\n    const isCorrect = checkUserInputAgainstDatabase(userInput, currentTask);\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    generateRandomTask(); // Generate a new task after completion\n    setUserInput(''); // Clear user input\n  };\n\n  const checkUserInputAgainstDatabase = (userInput, currentTask) => {\n    // Implement your logic to check against the database here\n    // You may need to make an API call to your Flask app or another backend service\n    // to fetch data from the database and compare it with the user's input.\n\n    // Example placeholder logic:\n    // return true if userInput matches the data in the database for currentTask\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BsNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Play the Musical Stairs Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Play the following chord or interval on the stairs: \", currentTask]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      placeholder: \"Enter your answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTaskCompleted,\n      children: \"Generate New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicalStairsGame, \"TmrRsRejbA+iTAhmGdq0WDYvri0=\");\n_c = MusicalStairsGame;\nexport default MusicalStairsGame;\nvar _c;\n$RefreshReg$(_c, \"MusicalStairsGame\");","map":{"version":3,"names":["React","useState","useEffect","BsNav","jsxDEV","_jsxDEV","MusicalStairsGame","_s","allTasks","availableTasks","setAvailableTasks","currentTask","setCurrentTask","score","setScore","userInput","setUserInput","generateRandomTask","length","randomIndex","Math","floor","random","newTask","prevTasks","filter","task","handleTaskCompleted","isCorrect","checkUserInputAgainstDatabase","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/src/Components/TheoryTrainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BsNav from '../Containers/BsNav';\n\nconst MusicalStairsGame = () => {\n  const allTasks = [\n    'Major triad', 'Minor Triad',\n    'Perfect 5th', 'Major 3rd', 'Minor 7th',\n    'Perfect 4th', 'Major 2nd', 'Minor 3rd',\n    'Minor 2nd',\n  ];\n\n  const [availableTasks, setAvailableTasks] = useState([...allTasks]);\n  const [currentTask, setCurrentTask] = useState('');\n  const [score, setScore] = useState(0);\n  const [userInput, setUserInput] = useState('');\n\n  useEffect(() => {\n    generateRandomTask();\n  }, []); // Empty dependency array ensures this effect runs once on mount\n\n  const generateRandomTask = () => {\n    if (availableTasks.length === 0) {\n      // Reset the available tasks when all tasks have been completed\n      setAvailableTasks([...allTasks]);\n    }\n\n    const randomIndex = Math.floor(Math.random() * availableTasks.length);\n    const newTask = availableTasks[randomIndex];\n\n    // Remove the selected task from the available tasks\n    setAvailableTasks((prevTasks) => prevTasks.filter((task) => task !== newTask));\n\n    setCurrentTask(newTask);\n  };\n\n  const handleTaskCompleted = () => {\n    // Check the user input against the data in the database\n    // Replace this logic with your actual comparison against the database\n\n    // Assuming you have a function to check the user input against the database\n    const isCorrect = checkUserInputAgainstDatabase(userInput, currentTask);\n\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    generateRandomTask(); // Generate a new task after completion\n    setUserInput(''); // Clear user input\n  };\n\n  const checkUserInputAgainstDatabase = (userInput, currentTask) => {\n    // Implement your logic to check against the database here\n    // You may need to make an API call to your Flask app or another backend service\n    // to fetch data from the database and compare it with the user's input.\n\n    // Example placeholder logic:\n    // return true if userInput matches the data in the database for currentTask\n    return true;\n  };\n\n  return (\n    <div>\n      <BsNav />\n      <h1>Play the Musical Stairs Game</h1>\n      <p>Play the following chord or interval on the stairs: {currentTask}</p>\n      <input\n        type=\"text\"\n        value={userInput}\n        onChange={(e) => setUserInput(e.target.value)}\n        placeholder=\"Enter your answer\"\n      />\n      <p>Score: {score}</p>\n      <button onClick={handleTaskCompleted}>Generate New Task</button>\n      {/* Add your stair visualization or other game elements here */}\n    </div>\n  );\n};\n\nexport default MusicalStairsGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}