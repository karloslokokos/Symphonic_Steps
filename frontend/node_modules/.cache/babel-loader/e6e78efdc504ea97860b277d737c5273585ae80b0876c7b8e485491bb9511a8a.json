{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/Score.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport VexFlow from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VF = VexFlow.Flow;\nconst {\n  Formatter,\n  Renderer,\n  Stave,\n  StaveNote\n} = VF;\nconst clefAndTimeWidth = 60;\nconst barsPerLine = 8;\n\n// ... (previous imports)\n\nexport function Score({\n  staves = [],\n  clef = 'treble',\n  timeSignature = '4/4',\n  width = 500,\n  height = 150\n}) {\n  _s();\n  const container = useRef();\n  const rendererRef = useRef();\n  useEffect(() => {\n    if (rendererRef.current == null) {\n      rendererRef.current = new Renderer(container.current, Renderer.Backends.SVG);\n    }\n    const renderer = rendererRef.current;\n    renderer.resize(width, height);\n    const context = renderer.getContext();\n    context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');\n    const staveWidth = (width - clefAndTimeWidth) / barsPerLine;\n    let currX = 0;\n    let currStave;\n    staves.forEach((notes, i) => {\n      if (i % barsPerLine === 0) {\n        currX = i === 0 ? 0 : clefAndTimeWidth;\n        currStave = new Stave(currX, 0, staveWidth);\n        if (i === 0) {\n          currStave.setWidth(staveWidth + clefAndTimeWidth);\n          currStave.addClef(clef).addTimeSignature(timeSignature);\n        }\n        currStave.setContext(context).draw();\n      }\n      const processedNotes = notes.map(note => typeof note === 'string' ? {\n        key: note\n      } : note).map(note => Array.isArray(note) ? {\n        key: note[0],\n        duration: note[1]\n      } : note).map(({\n        key,\n        ...rest\n      }) => typeof key === 'string' ? {\n        key: key.includes('/') ? key : `${key[0]}/${key.slice(1)}`,\n        ...rest\n      } : rest).map(({\n        key,\n        keys,\n        duration = 'q'\n      }) => new StaveNote({\n        keys: key ? [key] : keys,\n        duration: String(duration)\n      }));\n      Formatter.FormatAndDraw(context, currStave, processedNotes, {\n        auto_beam: true\n      });\n      currX += staveWidth;\n    });\n  }, [staves, clef, timeSignature, width, height]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: container\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 12\n  }, this);\n}\n_s(Score, \"Oo94nw6YKmif0GbcQr28f6bFgJU=\");\n_c = Score;\nvar _c;\n$RefreshReg$(_c, \"Score\");","map":{"version":3,"names":["React","useRef","useEffect","VexFlow","jsxDEV","_jsxDEV","VF","Flow","Formatter","Renderer","Stave","StaveNote","clefAndTimeWidth","barsPerLine","Score","staves","clef","timeSignature","width","height","_s","container","rendererRef","current","Backends","SVG","renderer","resize","context","getContext","setFont","setBackgroundFillStyle","staveWidth","currX","currStave","forEach","notes","i","setWidth","addClef","addTimeSignature","setContext","draw","processedNotes","map","note","key","Array","isArray","duration","rest","includes","slice","keys","String","FormatAndDraw","auto_beam","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/Score.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport VexFlow from 'vexflow';\n\nconst VF = VexFlow.Flow;\nconst { Formatter, Renderer, Stave, StaveNote } = VF;\n\nconst clefAndTimeWidth = 60;\nconst barsPerLine = 8;\n\n// ... (previous imports)\n\nexport function Score({\n    staves = [],\n    clef = 'treble',\n    timeSignature = '4/4',\n    width = 500,\n    height = 150,\n  }) {\n    const container = useRef();\n    const rendererRef = useRef();\n  \n    useEffect(() => {\n      if (rendererRef.current == null) {\n        rendererRef.current = new Renderer(\n          container.current,\n          Renderer.Backends.SVG\n        );\n      }\n  \n      const renderer = rendererRef.current;\n      renderer.resize(width, height);\n      const context = renderer.getContext();\n      context.setFont('Arial', 10, '').setBackgroundFillStyle('#eed');\n      const staveWidth = (width - clefAndTimeWidth) / barsPerLine;\n  \n      let currX = 0;\n      let currStave;\n  \n      staves.forEach((notes, i) => {\n        if (i % barsPerLine === 0) {\n          currX = i === 0 ? 0 : clefAndTimeWidth;\n          currStave = new Stave(currX, 0, staveWidth);\n  \n          if (i === 0) {\n            currStave.setWidth(staveWidth + clefAndTimeWidth);\n            currStave.addClef(clef).addTimeSignature(timeSignature);\n          }\n  \n          currStave.setContext(context).draw();\n        }\n  \n        const processedNotes = notes\n          .map(note => (typeof note === 'string' ? { key: note } : note))\n          .map(note =>\n            Array.isArray(note) ? { key: note[0], duration: note[1] } : note\n          )\n          .map(({ key, ...rest }) =>\n            typeof key === 'string'\n              ? {\n                  key: key.includes('/') ? key : `${key[0]}/${key.slice(1)}`,\n                  ...rest,\n                }\n              : rest\n          )\n          .map(\n            ({ key, keys, duration = 'q' }) =>\n              new StaveNote({\n                keys: key ? [key] : keys,\n                duration: String(duration),\n              })\n          );\n  \n        Formatter.FormatAndDraw(context, currStave, processedNotes, {\n          auto_beam: true,\n        });\n  \n        currX += staveWidth;\n      });\n    }, [staves, clef, timeSignature, width, height]);\n  \n    return <div ref={container} />;\n  }\n  \n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}