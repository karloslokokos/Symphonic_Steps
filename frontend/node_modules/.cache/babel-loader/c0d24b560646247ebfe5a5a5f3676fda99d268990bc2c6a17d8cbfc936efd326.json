{"ast":null,"code":"import { RuntimeError } from './util.js';\nclass Fraction {\n  static get CATEGORY() {\n    return \"Fraction\";\n  }\n  static GCD(a, b) {\n    if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n      throw new RuntimeError('BadArgument', \"Invalid numbers: \".concat(a, \", \").concat(b));\n    }\n    let t;\n    while (b !== 0) {\n      t = b;\n      b = a % b;\n      a = t;\n    }\n    return a;\n  }\n  static LCM(a, b) {\n    return a * b / Fraction.GCD(a, b);\n  }\n  static LCMM(args) {\n    if (args.length === 0) {\n      return 0;\n    } else if (args.length === 1) {\n      return args[0];\n    } else if (args.length === 2) {\n      return Fraction.LCM(args[0], args[1]);\n    } else {\n      return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n    }\n  }\n  constructor(numerator, denominator) {\n    this.numerator = 1;\n    this.denominator = 1;\n    this.set(numerator, denominator);\n  }\n  set() {\n    let numerator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let denominator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.numerator = numerator;\n    this.denominator = denominator;\n    return this;\n  }\n  value() {\n    return this.numerator / this.denominator;\n  }\n  simplify() {\n    let u = this.numerator;\n    let d = this.denominator;\n    const gcd = Fraction.GCD(u, d);\n    u /= gcd;\n    d /= gcd;\n    if (d < 0) {\n      d = -d;\n      u = -u;\n    }\n    return this.set(u, d);\n  }\n  add() {\n    let param1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let param2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a + otherNumerator * b;\n    return this.set(u, lcm);\n  }\n  subtract() {\n    let param1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let param2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    const lcm = Fraction.LCM(this.denominator, otherDenominator);\n    const a = lcm / this.denominator;\n    const b = lcm / otherDenominator;\n    const u = this.numerator * a - otherNumerator * b;\n    return this.set(u, lcm);\n  }\n  multiply() {\n    let param1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let param2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n  }\n  divide() {\n    let param1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let param2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n    return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n  }\n  equals(compare) {\n    const a = Fraction.__staticFractionA.copy(compare).simplify();\n    const b = Fraction.__staticFractionB.copy(this).simplify();\n    return a.numerator === b.numerator && a.denominator === b.denominator;\n  }\n  greaterThan(compare) {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator > 0;\n  }\n  greaterThanEquals(compare) {\n    const a = Fraction.__staticFractionB.copy(this);\n    a.subtract(compare);\n    return a.numerator >= 0;\n  }\n  lessThan(compare) {\n    return !this.greaterThanEquals(compare);\n  }\n  lessThanEquals(compare) {\n    return !this.greaterThan(compare);\n  }\n  clone() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n  copy(other) {\n    if (typeof other === 'number') {\n      return this.set(other, 1);\n    } else {\n      return this.set(other.numerator, other.denominator);\n    }\n  }\n  quotient() {\n    return Math.floor(this.numerator / this.denominator);\n  }\n  remainder() {\n    return this.numerator % this.denominator;\n  }\n  makeAbs() {\n    this.denominator = Math.abs(this.denominator);\n    this.numerator = Math.abs(this.numerator);\n    return this;\n  }\n  toString() {\n    return \"\".concat(this.numerator, \"/\").concat(this.denominator);\n  }\n  toSimplifiedString() {\n    return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n  }\n  toMixedString() {\n    let s = '';\n    const q = this.quotient();\n    const f = Fraction.__staticFractionTmp.copy(this);\n    if (q < 0) {\n      f.makeAbs();\n    }\n    if (q !== 0) {\n      s += q;\n      if (f.numerator !== 0) {\n        s += \" \".concat(f.toSimplifiedString());\n      }\n    } else if (f.numerator === 0) {\n      s = '0';\n    } else {\n      s = f.toSimplifiedString();\n    }\n    return s;\n  }\n  parse(str) {\n    const i = str.split('/');\n    const n = parseInt(i[0], 10);\n    const d = i[1] ? parseInt(i[1], 10) : 1;\n    return this.set(n, d);\n  }\n}\nFraction.__staticFractionA = new Fraction();\nFraction.__staticFractionB = new Fraction();\nFraction.__staticFractionTmp = new Fraction();\nexport { Fraction };\nfunction getNumeratorAndDenominator(n) {\n  let d = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  if (typeof n === 'number') {\n    return [n, d];\n  } else {\n    return [n.numerator, n.denominator];\n  }\n}","map":{"version":3,"names":["RuntimeError","Fraction","CATEGORY","GCD","a","b","Number","isNaN","concat","t","LCM","LCMM","args","length","shift","constructor","numerator","denominator","set","arguments","undefined","value","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","__staticFractionA","copy","__staticFractionB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","Math","floor","remainder","makeAbs","abs","toString","toSimplifiedString","__staticFractionTmp","toMixedString","s","q","f","parse","str","i","split","n","parseInt"],"sources":["/Users/fitzpatrickcarl/Documents/project-root/frontend/node_modules/vexflow/build/esm/src/fraction.js"],"sourcesContent":["import { RuntimeError } from './util.js';\nclass Fraction {\n    static get CATEGORY() {\n        return \"Fraction\";\n    }\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    static LCM(a, b) {\n        return (a * b) / Fraction.GCD(a, b);\n    }\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return Fraction.LCM(args[0], args[1]);\n        }\n        else {\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n        }\n    }\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    value() {\n        return this.numerator / this.denominator;\n    }\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = Fraction.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    equals(compare) {\n        const a = Fraction.__staticFractionA.copy(compare).simplify();\n        const b = Fraction.__staticFractionB.copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    greaterThan(compare) {\n        const a = Fraction.__staticFractionB.copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    greaterThanEquals(compare) {\n        const a = Fraction.__staticFractionB.copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    clone() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other, 1);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    toSimplifiedString() {\n        return Fraction.__staticFractionTmp.copy(this).simplify().toString();\n    }\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = Fraction.__staticFractionTmp.copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\nFraction.__staticFractionA = new Fraction();\nFraction.__staticFractionB = new Fraction();\nFraction.__staticFractionTmp = new Fraction();\nexport { Fraction };\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        return [n, d];\n    }\n    else {\n        return [n.numerator, n.denominator];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}