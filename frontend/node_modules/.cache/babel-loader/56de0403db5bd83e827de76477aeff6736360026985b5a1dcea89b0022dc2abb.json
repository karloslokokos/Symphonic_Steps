{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { Score } from './Score';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MusicVisualiser() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Make an API request to your Flask app\n    axios.get('http://localhost:5000/get_data').then(response => {\n      setData(response.data);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []);\n  useEffect(() => {\n    fetchData(); // Call the fetchData function when the component mounts\n  }, []); // The empty dependency array ensures it only runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(Score, {\n    staves: [data]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(MusicVisualiser, \"MNW7rnkI9oNPb711ySWHHHkbM9Y=\");\n_c = MusicVisualiser;\nexport default MusicVisualiser;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualiser\");","map":{"version":3,"names":["React","useEffect","axios","Score","jsxDEV","_jsxDEV","MusicVisualiser","_s","data","setData","useState","get","then","response","catch","error","console","fetchData","staves","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { Score } from './Score'\n \nfunction MusicVisualiser() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // Make an API request to your Flask app\n    axios.get('http://localhost:5000/get_data')\n      .then((response) => {\n        setData(response.data);\n      })\n      .catch((error) => {\n        console.error('Error fetching data:', error);\n      });\n  }, []);\n\n  useEffect(() => {\n    fetchData(); // Call the fetchData function when the component mounts\n  }, []); // The empty dependency array ensures it only runs once on mount\n\n\n  \n  return (\n    <Score\n      staves={[\n       data\n      ]}\n    />\n  )\n}\n\nexport default MusicVisualiser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,SAAS;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAEpCT,SAAS,CAAC,MAAM;IACd;IACAC,KAAK,CAACS,GAAG,CAAC,gCAAgC,CAAC,CACxCC,IAAI,CAAEC,QAAQ,IAAK;MAClBJ,OAAO,CAACI,QAAQ,CAACL,IAAI,CAAC;IACxB,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENd,SAAS,CAAC,MAAM;IACdgB,SAAS,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAIR,oBACEZ,OAAA,CAACF,KAAK;IACJe,MAAM,EAAE,CACPV,IAAI;EACH;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN;AAACf,EAAA,CA3BQD,eAAe;AAAAiB,EAAA,GAAfjB,eAAe;AA6BxB,eAAeA,eAAe;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}