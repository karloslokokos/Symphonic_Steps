{"ast":null,"code":"var _jsxFileName = \"/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Factory } from 'vexflow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicVisualizer = () => {\n  _s();\n  const isInitialMount = useRef(true);\n  const vf = useRef(null);\n  useEffect(() => {\n    // Skip the effect on hot updates\n    if (!isInitialMount.current) {\n      return;\n    }\n\n    // Fetch note data from your API\n    fetch('http://localhost:5000/get_note_data').then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      const noteData = data.notes;\n\n      // Create the VexFlow instance\n      vf.current = new Factory({\n        renderer: {\n          elementId: 'output',\n          width: 500,\n          height: 200\n        }\n      });\n      const score = vf.current.EasyScore();\n      const system = vf.current.System();\n\n      // Assuming noteData is an array of note strings like ['C#5/q', 'B4', 'A4', 'G#4']\n      system.addStave({\n        voices: [score.voice(score.notes(...noteData))]\n      }).addClef('treble').addTimeSignature('4/4');\n      vf.current.draw();\n      console.log(noteData);\n      isInitialMount.current = false;\n    }).catch(error => console.error('Error parsing JSON or fetching notes:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Music Notation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicVisualizer, \"8qQqGiuHkgl0elo6YV/e9hkAw2g=\");\n_c = MusicVisualizer;\nexport default MusicVisualizer;\nvar _c;\n$RefreshReg$(_c, \"MusicVisualizer\");","map":{"version":3,"names":["React","useEffect","useRef","Factory","jsxDEV","_jsxDEV","MusicVisualizer","_s","isInitialMount","vf","current","fetch","then","response","ok","Error","status","json","data","noteData","notes","renderer","elementId","width","height","score","EasyScore","system","System","addStave","voices","voice","addClef","addTimeSignature","draw","console","log","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/fitzpatrickcarl/my-musical-stairs-app/src/MusicVisualiser.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Factory } from 'vexflow';\n\nconst MusicVisualizer = () => {\n  const isInitialMount = useRef(true);\n  const vf = useRef(null);\n\n  useEffect(() => {\n    // Skip the effect on hot updates\n    if (!isInitialMount.current) {\n      return;\n    }\n\n    // Fetch note data from your API\n    fetch('http://localhost:5000/get_note_data')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        const noteData = data.notes;\n\n        // Create the VexFlow instance\n        vf.current = new Factory({\n          renderer: { elementId: 'output', width: 500, height: 200 },\n        });\n\n        const score = vf.current.EasyScore();\n        const system = vf.current.System();\n\n        // Assuming noteData is an array of note strings like ['C#5/q', 'B4', 'A4', 'G#4']\n        system\n          .addStave({\n            voices: [score.voice(score.notes(...noteData))],\n          })\n          .addClef('treble')\n          .addTimeSignature('4/4');\n\n        vf.current.draw();\n        console.log(noteData)\n\n        isInitialMount.current = false;\n      })\n      .catch(error => console.error('Error parsing JSON or fetching notes:', error));\n  }, []);\n\n  return (\n    <div>\n      <h2>Music Notation</h2>\n      <div id=\"output\"></div>\n    </div>\n  );\n};\n\nexport default MusicVisualizer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,OAAO,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,cAAc,GAAGN,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMO,EAAE,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACO,cAAc,CAACE,OAAO,EAAE;MAC3B;IACF;;IAEA;IACAC,KAAK,CAAC,qCAAqC,CAAC,CACzCC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBF,QAAQ,CAACG,MAAO,EAAC,CAAC;MAC3D;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;MACZ,MAAMC,QAAQ,GAAGD,IAAI,CAACE,KAAK;;MAE3B;MACAX,EAAE,CAACC,OAAO,GAAG,IAAIP,OAAO,CAAC;QACvBkB,QAAQ,EAAE;UAAEC,SAAS,EAAE,QAAQ;UAAEC,KAAK,EAAE,GAAG;UAAEC,MAAM,EAAE;QAAI;MAC3D,CAAC,CAAC;MAEF,MAAMC,KAAK,GAAGhB,EAAE,CAACC,OAAO,CAACgB,SAAS,CAAC,CAAC;MACpC,MAAMC,MAAM,GAAGlB,EAAE,CAACC,OAAO,CAACkB,MAAM,CAAC,CAAC;;MAElC;MACAD,MAAM,CACHE,QAAQ,CAAC;QACRC,MAAM,EAAE,CAACL,KAAK,CAACM,KAAK,CAACN,KAAK,CAACL,KAAK,CAAC,GAAGD,QAAQ,CAAC,CAAC;MAChD,CAAC,CAAC,CACDa,OAAO,CAAC,QAAQ,CAAC,CACjBC,gBAAgB,CAAC,KAAK,CAAC;MAE1BxB,EAAE,CAACC,OAAO,CAACwB,IAAI,CAAC,CAAC;MACjBC,OAAO,CAACC,GAAG,CAACjB,QAAQ,CAAC;MAErBX,cAAc,CAACE,OAAO,GAAG,KAAK;IAChC,CAAC,CAAC,CACD2B,KAAK,CAACC,KAAK,IAAIH,OAAO,CAACG,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC,CAAC;EAClF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjC,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBtC,OAAA;MAAKuC,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACpC,EAAA,CAnDID,eAAe;AAAAuC,EAAA,GAAfvC,eAAe;AAqDrB,eAAeA,eAAe;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}